<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href ="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Turing/vegtelen_ciklus">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Turing/vegtelen_ciklus</link>          
        </para>
        <para>
            Ebben az esetben a következő végtelen ciklus 100%-ban dolgoztat egy magot:
        </para>   
         <programlisting language="c">
   <![CDATA[
        int main()
        {
             while(1){}
             return 0;
        }
   ]]>
        </programlisting>
        
        <para>
            A program fordítása és indítása után a <command>top -p `pgrep -u adrian loop1`</command> parancs beírásakor láthatjuk
            a várt eredményt.
        </para>
        <screen>
  <![CDATA[
  Tasks: 1 total, 1 running, 0 sleeping,   0 stopped,   0 zombie
  %Cpu0: 1,3 us, 0,3 sy, 0,0 ni, 98,0 id, 0,0 wa, 0,0 hi, 0,3 si, 0,0 st
  %Cpu1: 0,3 us, 0,3 sy, 0,0 ni, 99,3 id, 0,0 wa, 0,0 hi, 0,0 si, 0,0 st
  %Cpu2: 100,0 us, 0,0 sy, 0,0 ni, 0,0 id, 0,0 wa, 0,0 hi, 0,0 si, 0,0 st
  %Cpu3: 1,4 us, 0,0 sy, 0,0 ni, 98,6 id, 0,0 wa,  0,0 hi, 0,0 si, 0,0 st
  KiB Mem: 8025272 total, 4308952 free, 1653004 used, 2063316 buff/cache
  KiB Swap: 3897340 total, 3897340 free, 0 used. 5653664 avail Mem 
            
  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND     
  4134 adrian    20   0    4376    756    692 R 100,0  0,0   1:14.23 loop1  
  ]]>
        </screen>
        
       
        <para>
            
            0% terhelés eléréséhez meg kell hívnunk a <function>sleep(n)</function> metódust ami lelassítja az iterálás sebességét. 
        </para>
        <programlisting language="c">
   <![CDATA[
    int main()
    {
        while(1)
        {
            sleep(1);
        }
        return 0;	
    }
   ]]>
        </programlisting>
         <screen>
  <![CDATA[
 PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND     
 4515 adrian    20   0    4376    816    752 S   0,0  0,0   0:00.00 loop0  
  ]]>
        </screen>
        <para>
            Minden mag 100% terhelését szálasítással lehet megoldani az OpenMP segítségével. 
        </para>
        <programlisting language="c">
   <![CDATA[
#include <omp.h>

    int main()
    {
        #pragma omp parallel
        {
            while(1){}
        }
        return 0;

    }
   ]]>
        </programlisting>
     <para>
         <command>gcc loop_all_cores.c -o loop -fopenmp</command> parancsal fordítjuk le ebben az esetben.
     </para>
      <screen>
  <![CDATA[
  Tasks: 1 total, 1 running, 0 sleeping, 0 stopped, 0 zombie
%Cpu0:100,0 us, 0,0 sy, 0,0 ni, 0,0 id, 0,0 wa, 0,0 hi, 0,0 si, 0,0 st
%Cpu1:100,0 us, 0,3 sy, 0,0 ni, 0,0 id, 0,0 wa, 0,0 hi, 0,0 si, 0,0 st
%Cpu2:100,0 us, 0,0 sy, 0,0 ni, 0,0 id, 0,0 wa, 0,0 hi, 0,0 si, 0,0 st
%Cpu3:100,0 us, 0,3 sy, 0,0 ni, 0,0 id, 0,0 wa, 0,0 hi, 0,0 si, 0,0 st

            
 PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND     
 4914 adrian    20   0   35576   1024    928 R 388,7  0,0   8:00.85 loop  
  ]]>
        </screen>
  
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/lefagy.png" scale="140" />
                </imageobject>
         </mediaobject>
        <para>
            Tegyük fel, hogy létezik olyan program (T100), ami el tudja dönteni egy másik programról, hogy van-e benne végtelen ciklus.
            Ha van, akkor megáll a program, ha nincs, akkor pedig végtelen ciklusba kezd. Létrehozunk egy új programot (T1000) az előzőt (T100)
            felhasználva és ha a T100 megállt, akkor végtelen ciklusba kezd, ha pedig a T100 kezdett végtelen ciklusba, akkor megáll.
           
        </para>
         <para>Mi történik, ha magát etetjük meg a programunkkal?</para>       
         <para>
             A megállás csak akkor lehetséges, ha a T100 nem áll meg, de ez pedig csak akkor lehet, ha a második argumentumként kapott saját programunk megáll.
         </para>
         <para>Ebből ellentmondásra jutottunk, tehát nem lehet ilyen programot írni.</para>
         
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Turing/val_csere.c">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Turing/val_csere.c</link> 
        </para>
        <para>
            Két változó értékének felcserélésének legegyszerűbb módja, amikor segédváltozót haszánálunk, amiben ideiglenesen
            eltároljuk az első változó értékét, majd az elsőt egyenlővé tesszük a másodikkal és a másodikat a segédváltozóval.
            Azonban léteznek módszerek segédváltozó nélküli cserére is.
        </para>
        
        <para>
            Ebben az esetben segédváltozó nélkül cseréljük meg két változó értékét a különbségük kihasználásával.
        </para>
        
         <programlisting language="c">
   <![CDATA[
#include<stdio.h>

int main()
{
		int a = 3;
		int b = 8;

		//segedvaltozo nelkül
    b = b-a;
		a = a+b;
		b = a-b;
		printf("a=%d b=%d\n",a,b);
   ]]>
        </programlisting>
        
        <para>
            A következő módszer pedig az EXOR-os csere.
        </para>
         <programlisting language="c">
   <![CDATA[
#include<stdio.h>

int main()
{
		int a = 3;
		int b = 8;

		//exorra
		//kettes számrendszerben:
		//a = 8-> 0001
		//b = 3-> 1100
		
		a = a^b; //1101
		b = a^b; //0001
		a = a^b; //1100
		
		printf("a=%d b=%d\n",a,b);
   ]]>
        </programlisting>
        
        
        
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href ="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Turing/labda">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Turing/labda</link>
        </para>
        <para>
            A labdapattogás nevű feladat klasszikus megoldása feltételvizsgálatokkal történik, ahol nyilvántartjuk a terminál méretét
            (fordításkor <command>-lncurses</command> könyvtár használatával), a labda koordinátáinak kezdőértékét és lépések mértékét. 
            Ezután if feltételvizsgálattal nézzük, hogy ha elérte az egyik oldalt a labda, akkor változtatjuk a lépések irányát. Használjuk még a
            <command>usleep(n)</command> metódust aminek segítségével lassítjuk a labda mozgását és a <command>clear()</command> metódussal pedig
            csak 1 labdát fogunk látni,mivel minden egyes iterációnál törli a ablakot.
            Azonban if nélkül is megoldható a feladat:
        </para>
        
        <programlisting language="c++">
   <![CDATA[
#include <iostream>
#include <vector>
#include <unistd.h>
using namespace std;

const int szelesseg = 40;//ablak szelesseg
const int magassag = 20;//ablak magassag
int x=1, y=1; //labda kezdoertek
int deltax=1,deltay=1; // hanyasaval lepkedjen
vector<int> ablakx;
vector<int> ablaky;

void kirajzol();
void mozgatas(){
	x=x+deltax;
	y=y+deltay;
	deltax=deltax*ablakx[x];
	deltay=deltay*ablaky[y];
}

int main(){

    for (int i=0; i<szelesseg; i++)
    {
         ablakx.push_back(1);
    }

    for (int i=0; i<magassag; i++)
    {
        ablaky.push_back(1);
    }

    ablakx[0]=-1;//bal oldal
    ablakx[szelesseg-1]=-1; // jobb oldal
    ablaky[0]=-1; //teteje
    ablaky[magassag]=-1; // alja

    for(;;)
    {
        kirajzol();
        mozgatas();
        usleep(100000);
    }

}
   ]]>
        </programlisting>
        
        <para>
            Hasonlóan az if-es megoldáshoz itt is rögzítjük a kezdőértékeket. Ebben az esetben nem saját
            ablakot rajzolunk ki, hogy lássunk ilyet is ,aminek előre meghatározzuk a magasságát és szélességét. A <command>kirajzol()</command>
            metódus keretet rajzol ki, amiben majd pattog a labda, más dolga nincs. A <command>main()</command> metódusban az ablakunk x és y szélességével
            töltjük fel a két vektort. Ezután beállítjuk -1 értékre a vektorok két elemét, hogy a <command>mozgatas()</command> 
            metódusban megszorozzuk a labda lépéseinek nagyságát (ami egyben az irányért is felelős) az oldalak értékeivel. Ha -1-el szorzunk, akkor
            ez az jelenti, hogy elérte az egyik oldalt és változtatjuk az irányt, hasonlóan az if-es megoldásnál, ahol ugyanez ifekkel történt.
            
        </para>

    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Turing/bogomips">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Turing/bogomips</link>
        </para>
<programlisting language="c">
   <![CDATA[
#include <stdio.h>

int main()
{
	int word = 1;
	int length = 0;
	
	do
	{
		length++;
	} 
	while (word<<=1);
	
	
	printf("A szó %d bites\n", length);
    
    return 0;
}
   ]]>
        </programlisting>

        <para>
            A típus méretét, illetve hogy hány bitet foglal, bitshifteléssel könnyen meghatározhatjuk. A while ciklusunkban mindig
            shiftelünk egyet balra a biteken és addig növeljük a length változót, amíg csupa 0 bitet nem fog tartalmazni a word változónk. 
            Mivel az int típusú változók 4 byte-on tárolódnak, ezért 32 bites lesz a szavunk.
        </para>
        <screen>
            <![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs$ gcc wordLength.c -o w
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs$ ./w
A szó 32 bites

            ]]>
        </screen>

        <para>
            BogoMips:
        </para>
        <para>
            Ez az algoritmus a Linux kernelben a CPU sebességét méri fel induláskor a busy-loop beállításához.A busy-loop azt jelenti, hogy
            egy folyamat folyamatosan vizsgál egy feltételt, amíg az igaz nem lesz és a BogoMips mutatja meg, hogy hány másodpercig nem csinál semmit a
            CPU.
        </para>
        <programlisting language="c">
            <![CDATA[
#include <time.h>
#include <stdio.h>

void delay (unsigned long long loops)
{
  for (unsigned long long i = 0; i < loops; i++);
}

int main (void)
{
  unsigned long long loops_per_sec = 1;
  unsigned long long ticks;

  printf ("Calibrating delay loop..");
  fflush (stdout);

  while ((loops_per_sec <<= 1))
    {
      ticks = clock ();
      delay (loops_per_sec);
      ticks = clock () - ticks;
      printf ("%llu %llu\n", ticks, loops_per_sec);

      if (ticks >= CLOCKS_PER_SEC)
	{
	  loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

	  printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
		  (loops_per_sec / 5000) % 100);

	  return 0;
	}
    }

  printf ("failed\n");
  return -1;
}
            ]]>
        </programlisting>
        <para>
            A while ciklusban bitshifteléssel megyünk végig a 2 hatványain.
            A ticks-ben tároljuk mennyi processzoridőt használt a CPU eddig, majd a delay() függvénynek
            átadjuk loops_per_sec változót (aminek a bitjei mindig odébb vannak eggyel tolva), ahol elszámolunk
            0-tól a változó végéig. 
            Ezután megint lekérjük a processzoridőt kivonva az előző ticks-ben tárolt CPU időt, így megkapjuk,
            mennyi ideig tartott a elszámolni a loops_per_sec változó végéig.
            Majd megnézzük if-el, hogy nagyobb vagy egyenlő a kapott ticks, mint a CLOCKS_PER_SEC aminek az értéke
            1 millió és ha ez igaz, akkor kiszámoljuk, hogy milyen érték kell ahhoz,hogy a ciklusértékéket megkapjuk, ezzel 
            meghatározva a CPU sebességét. 
        </para>
<screen><![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Turing/bogomips$ ./bogo
Calibrating delay loop..2 2
1 4
1 8
1 16
1 32
1 64
2 128
3 256
5 512
9 1024
16 2048
31 4096
58 8192
115 16384
266 32768
489 65536
919 131072
1844 262144
3678 524288
3216 1048576
4878 2097152
9305 4194304
19356 8388608
37773 16777216
76300 33554432
148557 67108864
292380 134217728
583864 268435456
1167209 536870912
ok - 918.00 BogoMIPS
]]></screen>  


    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Turing/pagerank.c">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Turing/pagerank.c</link>
        </para>
         <para>Tutoriált: Országh Levente</para>  
        <para>
            A Page Rank az interneten található oldalakat rangsorolja. Kezdetben minden oldalnak van egy szavazati pontja és ha
            az egyik linkeli a másikat, akkor a linkelt oldal megkapja a linkelő pontját. Tehát egy oldal akkor lesz előkelőbb helyen egy google
            kereséskor, ha minél több másik oldal linkel rá, illetve ezen oldalakra is minél többen linkelnek,
            annál jobb minőségűnek fog számítani egy linkelése vagy szavazata.
            Az alábbi algoritmusunk 4 honlapot rangsorol:      
        </para>
        <programlisting language="c++">
   <![CDATA[
#include <stdio.h>
#include <math.h>

void kiir (double tomb[], int db)
{
  int i;

  for (i = 0; i < db; ++i)
    printf ("%f\n", tomb[i]);
}

double tavolsag (double PR[], double PRv[], int n)
{
  double osszeg = 0.0;
  int i;

  for (i = 0; i < n; ++i)
    osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);

  return sqrt(osszeg);
}

int main (void)
{

  double L[4][4] = {
    {0.0, 0.0, 1.0 / 3.0, 0.0},
    {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
    {0.0, 1.0 / 2.0, 0.0, 0.0},
    {0.0, 0.0, 1.0 / 3.0, 0.0}
  };

  double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
  double PRv[4] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0 };

  int i, j;

  for (;;)
  {

    for (i = 0; i < 4; ++i)
    {
        PR[i] = 0.0;
        for (j = 0; j < 4; ++j)
            PR[i] += (L[i][j] * PRv[j]);
    }
        if (tavolsag (PR, PRv, 4) < 0.00000001)
            break;

      for (i = 0; i < 4; ++i)
        PRv[i] = PR[i];

  }

  kiir (PR, 4);

  return 0;
}
   ]]>
        </programlisting>
        
        
        <para>
            Az L nevű többdimenziós tömbben vannak rögzítve mátrix formájában az adatok a linkelésekről, melyik oldalra melyik oldal linkel és mennyit.
            A végtelen ciklusban nullázzuk PR összes elemét, majd rögtön hozzáadjuk az L mátrix és PRv vektor szorzatainak értékét.
            Ezután a távolság metódusunkban végigmegyünk a PR és PRv vektorokon és egy változóban eltároljuk ezek különbségének a négyzetét (hogy ne legyen negatív) és gyököt
            vonva visszaadjuk az értéket, amely ha kisebb mint 0.00000001, akkor kilépünk a végtelen ciklusból, ellenkező esetben
            pedig PRv tömböt feltöltjük PR elemeivel. Végül kiiratjuk az értékeket.
        </para>
        
        <screen>
  <![CDATA[
0.090909
0.545455
0.272727
0.090909
  ]]>
        </screen>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/attention_raising/Primek_R/stp.r">https://github.com/p-adrian05/BHAX/blob/master/attention_raising/Primek_R/stp.r</link>
        </para>
        
        <para>
            A Brun tétel azt mondja, hogy az ikerprímszámok reciprokából képzett összege konvergál egy számhoz. Ezt határt 
            Brun konstansnak nevezzük. Ezzel ellentétben a prímszámok a végtelen felé tartanak.
        </para>
        <para>
            Mik azok a prímszámok?
        </para>
        <para>
            A prímszám olyan természetes szám, ami csak önmagával és eggyel osztható és minden természetes szám előállítható prímszámok
            szorzataként. Ikerprímek pedig azok a prímszámok, amelyek egymás után következnek és különbségük 2.
        </para>
        <para>
            A Brun tétel szimulációja a matematikai R nyelvben lesz megírva, használva a matlab csomagot a prímszámok számítására.
        </para> 
         <programlisting language="R">
<![CDATA[

sumTwinPrimes <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = sumTwinPrimes)
plot(x,y,type="b")
]]>
        </programlisting>  
        
        <para>
            Létrehozunk egy függvényt aminek paraméterként átadjuk, hogy meddig számolja függvényünk az ikerprímszámokat.
            A primes vektorba kiszámoljuk a <command>primes(x)</command> fügvénnyel a prímszámokat.
            A diff vektorban eltároljuk az egymásután következő prímszámok különbségét.
            Az idx vektorban, pedig azokat a helyeket tároljuk, el ahol a különség 2, tehát ikerprímek találhatóak ott.
            A t1primes vektorban elátároljuk az ikerprímek első párját, a t2primes-ban pedig hozzáadva minden első párhoz kettőt,
            az ikerprímek második párját is.
            Az rt1plust2 vektorban tároljuk minden párnak a reciprokainak az összegét, majd ezeket az összegeket <command>sum()</command> függvénnyel
            összeadjuk és visszaadjuk ezt az értéket. 
        </para>
        <para>
            Ezután kirajzoltatjuk és láthatjuk, hogy valóban egy felső határhoz konvergálnak az összegek.
        </para>
        
<figure>
            <title>A B<subscript>2</subscript> konstans közelítése</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/BrunKorok.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A B<subscript>2</subscript> konstans közelítése</phrase>
                </textobject>
            </mediaobject>
        </figure>       


        
        
        
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/attention_raising/MontyHall_R/mh.r">https://github.com/p-adrian05/BHAX/blob/master/attention_raising/MontyHall_R/mh.r</link>
        </para>
        <para>
            A Monty Hall probléma egy amerikai televíziós vetélekedőben jelent meg, ahol a műsor végén a játékosnak 3 ajtó közül kellett választania. 
            A nyeremény csak az egyik ajtó mögött volt. A játékos választása után a műsorvezető kinyitott egy üres ajtót és feltette a kérdést, hogy fenntartja-e a választását a játékos vagy
            egy másik ajtót választ. A Monty Hall probléma kérdése, hogy számít-e, hogy a játékos megváltoztatja-e a választását.
            Józan ésszel gondolkodva nem számít, mivel a maradék két ajtó közül az egyik mögött van a nyeremény, így 50-50% az esélye annak, hogy nyerünk.
            A feladvány bizonyítása több matematikai professzoron is kifogott, köztük a világhírű Erdős Pálon is, akit csak a számítógépes szimuláció győzött meg, ami alapján
            számít, hogy másik ajtót választunk, ugyanis ekkor megduplázódik az esélyünk a nyerésre.
        </para>
        <para>
            Amikor először választunk ajtót, akkor 1/3 az esélye annak, hogy eltaláljuk a nyertes ajtót és 2/3, hogy nem. Ezután a játékvezető kinyit egy ajtót, amelyik üres
            és ha nem változtatunk a döntésünkön, továbbra is 1/3 lesz annak az esélye, hogy nyertünk. Viszont mivel már csak 2 ajtó van a játékban ezért ha változtatunk, akkor
            2/3 lesz az esélyünk a nyerésre. 
        </para>
        
        <para>Ennek bizonyítását láthatjuk R nyelven megfogalmazva:</para>
         <programlisting language="R">
<![CDATA[
kiserletek_szama=1000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }

    musorvezeto[i] = mibol[sample(1:length(mibol),1)]

}

nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}

valtoztatesnyer = which(kiserlet==valtoztat)


sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)
]]>
        </programlisting>  
        
        
            
        <para>
            Először eltároljuk, hogy hány kisérletet végezzünk el, majd a kiserlet és jatekos vektorokban kisorsolunk 1 és 3 között véletlenszerűen számokat.
            A műsorvezető vektorát beállítjuk a kísérletek számával. Ezután egy for ciklussal végigmegyünk minden kísérleten és ha kiserlet i-edig értéke megyegyezik a 
            a játékos i-edig találatával, az jelenti, hogy eltalálta a játékos a nyereményt és a mibol vektorba az a két érték kerül be amelyeket a játékos nem
            választott. (Ez a két érték az üres ajtókat jelenti ebben az esetben.)
        </para>  
        <para>
            Ha a játékos nem találta el elsőre a kiserlet vektorban található számot, akkor a mibol vektorba már csak 1 egy érték kerülhet, az amelyik nem a nyeremény és nem
            a játékos által kiválasztott érték. Ezután a musorvezeto vektorba berakjuk a mibol vektorban található számot, illetve ha két érték van benne akkor a kettőből az egyiket 
            véletlenszerűen.
        </para>
        <para>
            Ezután értkezik a kiértékelés. A nemvaltoztatesnyer vektorba kerülnek azok az esetek, amikor elsőre eltalálja a játékos a megfelelő ajtót.
            Megint végigmegyünk a kísérleteken és a holvalt vektorba azok vagy az az érték kerül az 1, 2 és 3 közül amely nem egyenlő a műsorvezető és a játékos által 
            választottal vagyis ekkor ha váltana a játékos akkor nyerne. A változtat vektorba pedig a holvalt vektor elemei közül az egyiket rakjuk át.
        </para>
        
        <para>
            A valtoztatesnyer vektorba pedig azok az értékek kerülnek, amelyek a kiserlet vektorba és a változtat vektorba találhatóak, vagyis ekkor az az ajtó a nyertes
            ,amelyiket másodjára választanánk. Eztuán pedig kiiratjuk az esetek számait:    
   </para>
   
             <programlisting language="R">
<![CDATA[
[1] "Kiserletek szama: 1000000"
> length(nemvaltoztatesnyer)
[1] 333590
> length(valtoztatesnyer)
[1] 666410
> length(nemvaltoztatesnyer)/length(valtoztatesnyer)
[1] 0.5005777
> length(nemvaltoztatesnyer)+length(valtoztatesnyer)
[1] 1000000
]]>
        </programlisting> 
            
            
    </section>

</chapter>                
