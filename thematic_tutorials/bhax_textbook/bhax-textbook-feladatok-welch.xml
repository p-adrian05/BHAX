<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Welch/polargen">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Welch/polargen</link>                
        </para>
        <para>
            A Java és a C++ objektumorientált nyelvek. Objektumok használata egyszerűsíti a programozást, ugyanis a az objektum 
            a valódi világ elemének a rá jellemző tulajdonságai és viselkedések által modelezett eleme. Erre jó példa a polártranszformációs 
            algoritmus. Az algoritmus matematikai háttere most számunkra lényegtelen, fontos viszont az eljárás azon jellemzője, hogy egy számítási lépés két normális eloszlású számot állít elő, 
            tehát minden páratlanadik meghíváskor nem kell számolnunk, csupán az előző lépés másik számát visszaadnunk. Hogy páros vagy páratlan lépésben hívtuk-e meg a megfelelő számítást elvégző következő() függvényt, 
            a nincsTárolt logikai változóval jelöljük. Igaz értéke azt jelenti, hogy tárolt lebegőpontos változóban el van tárolva a visszaadandó szám.
        </para> 
        <para>Java-ban:</para>
        <programlisting language="java">
<![CDATA[ 

public class PolárGenerátor {
    
    boolean nincsTárolt = true;
    double tárolt;
    
    public PolárGenerátor() {
        
        nincsTárolt = true;
        
    }
    
    public double következő() {
        
        if(nincsTárolt) {
            
            double u1, u2, v1, v2, w;
            do {
                u1 = Math.random();
                u2 = Math.random();
                
                v1 = 2*u1 - 1;
                v2 = 2*u2 - 1;
                
                w = v1*v1 + v2*v2;
                
            } while(w > 1);
            
            double r = Math.sqrt((-2*Math.log(w))/w);
            
            tárolt = r*v2;
            nincsTárolt = !nincsTárolt;
            
            return r*v1;
            
        } else {
            nincsTárolt = !nincsTárolt;
            return tárolt;
        }
    }
    
    public static void main(String[] args) {
        
        PolárGenerátor g = new PolárGenerátor();
        
        for(int i=0; i<10; ++i)
            System.out.println(g.következő());
        
    }
    
}

]]>
        </programlisting> 
         <screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop$ javac PolárGenerátor.java
adrian@adrian-MS-7817:~/Desktop$ java PolárGenerátor
-0.9977909475608935
1.2436431306621076
-1.0241389099503682
0.9924334466411862
0.36416475700814943
0.9602245062934003
-0.5074463598559636
0.7797384696972893
-0.11174392973220601
0.8032167627641318

 ]]>
        </screen>
    <para>A JDK(Java Development Kit) Random.java osztályban a
         Sun programozói is lett megoldva a random szám generálás.</para>
          <mediaobject>
            <imageobject>
                <imagedata fileref="img/jdk.png" scale="50" />
            </imageobject>
        </mediaobject>
<para>C++-ban:</para>
 <programlisting language="c++">
<![CDATA[ 

#include <cstdlib>
#include <cmath>
#include <ctime>
#include <iostream>
class PolarGen
{
public:
  PolarGen ()
  {
    nincsTarolt = true;
    std::srand (std::time (NULL));
  }
   ~PolarGen ()
  {

  }
double kovetkezo ()
{
  if (nincsTarolt)
    {
      double u1, u2, v1, v2, w;
      do
	{
	  u1 = std::rand () / (RAND_MAX + 1.0);
	  u2 = std::rand () / (RAND_MAX + 1.0);
	  v1 = 2 * u1 - 1;
	  v2 = 2 * u2 - 1;
	  w = v1 * v1 + v2 * v2;
	}
      while (w > 1);

      double r = std::sqrt ((-2 * std::log (w)) / w);

      tarolt = r * v2;
      nincsTarolt = !nincsTarolt;

      return r * v1;
    }
  else
    {
      nincsTarolt = !nincsTarolt;
      return tarolt;
    }
}
private:
  bool nincsTarolt;
  double tarolt;
};

int main (int argc, char **argv)
{
  PolarGen pg;

  for (int i = 0; i < 10; ++i)
    std::cout << pg.kovetkezo () << std::endl;

  return 0;
}
]]>
        </programlisting>
         <screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop$ g++ polargen.cpp -o p
adrian@adrian-MS-7817:~/Desktop$ ./p
0.33827
0.159026
1.07617
-0.573861
0.407831
0.337813
1.1272
1.33273
-1.67664
0.401283

 ]]>
        </screen>
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Welch/z.c">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Welch/z.c</link>               
        </para>

        <para>
            Az LZW algoritmus fa struktúrában ábrázolja a beérkező bináris adatokat. Az input adatok feldolgozása során 
            a gyökértől indulva, addig követjük a fa ágait, amíg egy olyan részsztringhez nem érünk, amely már nincs benne a fában. 
            Ekkor a részsztring utolsó karakterével, ami éppen feldolgozás alatt van, bővítjük a fát. A következő inputtal egy 
            új részsztringet indítunk és újra a gyökértől próbáljuk meg illeszteni az inputot. Az algoritmus teljes neve Lempel-Ziv-Welch
            , amit Abraham Lempel, Jacob Ziv, és Terry Welch dolgozott ki, ami egy veszteségmentes tömörítő algoritmus. Ezt az algoritmust használja 
            a gif formátum, illetve sok tömörítő program is, pl compress, gzip, zip. 
        </para>

        <para>
            A program legelején először is létrehozunk egy binfa struktúrát. Ezzel létrehozunk egy binfa típust, amiben deklarálunk egy 
            egész típusú változót, ebben tároljuk majd a beérkező adatot. Ezután a fa bal és jobb oldali mutatóját adjuk meg, ami a gyökér jobb illetve bal 
            gyerekére fog mutatni, majd létrehozzunk a binfa típusra mutató mutatót. Az uj_elem() függvényben memória területet foglalunk le a mutatónak.
            A main függvényben dolgozzuk fel a beérkező adatokat. Létrehozzuk a gyoker mutatót, amit ráállítunk a neki lefoglalt memória területre, majd ennek
            megadjuk az értékét, ami '/' lesz mivel ez lesz a fő, első gyökér. Ezután létrehozunk egy fa mutatót. 
            Következik az adatok beolvasása a inputból és megnézzük a beolvasott értéket, hogy ha 0, akkor megvizsgáljuk,hogy a fa mutató bal gyereke null értékű-e , tehát nincs gyereke. 
            Ebben az esetben a fa mutató bal gyerekének lefoglalunk helyet és az értékét 0-ra állítjuk. Ezután ennek az új gyermeknek a jobb és bal mutatóját állítjuk null-ra és a fa mutatóját 
            ráállítjuk a az új gyökérre. Ha pedig a fa bal gyermeke nem null-ra mutat, akkor a fát ráállítjuk a bal gyermekére, vagyis az lesz az aktuális gyökér.
            1 érték esetén ugyanez játszódik le, csak a jobb oldali elemeket vizsgáljuk.
            Végül kiiratjuk az elkészült fánkat, végigjárva inorder bejárással, közben számolva a fa magasságát, majd felszabadítva a memóriát. 

        </para>

<programlisting language="c">
<![CDATA[ #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

typedef struct binfa
{
  int ertek;
  struct binfa *bal_nulla;
  struct binfa *jobb_egy;

} BINFA, *BINFA_PTR;

BINFA_PTR
uj_elem ()
{
  BINFA_PTR p;

  if ((p = (BINFA_PTR) malloc (sizeof (BINFA))) == NULL)
    {
      perror ("memoria");
      exit (EXIT_FAILURE);
    }
  return p;
}

extern void kiir (BINFA_PTR elem);
extern void szabadit (BINFA_PTR elem);

int
main (int argc, char **argv)
{
  char b;

  BINFA_PTR gyoker = uj_elem ();
  gyoker->ertek = '/';
  BINFA_PTR fa = gyoker;

  while (read (0, (void *) &b, 1))
    {
      write (1, &b, 1);
      if (b == '0')
	{
	  if (fa->bal_nulla == NULL)
	    {
	      fa->bal_nulla = uj_elem ();
	      fa->bal_nulla->ertek = 0;
	      fa->bal_nulla->bal_nulla = fa->bal_nulla->jobb_egy = NULL;
	      fa = gyoker;
	    }
	  else
	    {
	      fa = fa->bal_nulla;
	    }
	}
      else
	{
	  if (fa->jobb_egy == NULL)
	    {
	      fa->jobb_egy = uj_elem ();
	      fa->jobb_egy->ertek = 1;
	      fa->jobb_egy->bal_nulla = fa->jobb_egy->jobb_egy = NULL;
	      fa = gyoker;
	    }
	  else
	    {
	      fa = fa->jobb_egy;
	    }
	}
    }

  printf ("\n");
  kiir (gyoker);
  extern int max_melyseg;
  printf ("melyseg=%d", max_melyseg);
  szabadit (gyoker);
}

static int melyseg = 0;
int max_melyseg = 0;

void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > max_melyseg)
	max_melyseg = melyseg;
      kiir (elem->jobb_egy);
      for (int i = 0; i < melyseg; ++i)
	printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek,
	      melyseg);
      kiir (elem->bal_nulla);
      --melyseg;
    }
}

void
szabadit (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      szabadit (elem->jobb_egy);
      szabadit (elem->bal_nulla);
      free (elem);
    }
}
]]>
        </programlisting>  


    <para>
        Fordításkor használjuk az c99 szabványt, majd futtatáskor az adat.txt-ben lévő adatokat irányítjuk be a programba.
    </para> 
        <screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Welch$ gcc z.c -o z -std=c99
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Welch$ ./z <adat.txt
000111011101101100001110

------------1(4)
---------1(3)
---------------1(5)
------------0(4)
------1(2)
---------0(3)
---/(1)
---------1(3)
------0(2)
---------0(3)
------------0(4)

 ]]>
        </screen> 

    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                 
        </para>

    <para>A fa adatstruktúrákat három féleképpen lehet bejárni:inorder,postorder és preorder módon.</para>
    <para>A bejárások előtt először megnézzük, hogy a bejárandó fa nem üres. Inorder esetben először végigjárjuk a gyökérelem jobb oldali részfáját, feldolgozzuk a gyökérelemet 
      majd végigmegyünk a bal oldali részfán.</para>
    <programlisting language="c">
<![CDATA[ 

void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > max_melyseg)
	    max_melyseg = melyseg;

      kiir (elem->jobb_egy);

      for (int i = 0; i < melyseg; ++i)
	    printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek,
	      melyseg);

      kiir (elem->bal_nulla);

      --melyseg;
    }
}

]]>
        </programlisting>  
 <screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Welch$ gcc z.c -o z -std=c99
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Welch$ ./z <adat.txt
000111011101101100001110

------------1(4)
---------1(3)
---------------1(5)
------------0(4)
------1(2)
---------0(3)
---/(1)
---------1(3)
------0(2)
---------0(3)
------------0(4)

 ]]>
        </screen>
    <para>Preorder bejárásnál először dolgozzuk fel a gyökérelemet, majd bejárjuk a gyökérelem bal oldali részfáját, majd ezután a jobb oldali részfáját.</para>
  
<programlisting language="c">
    <![CDATA[ 

void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > max_melyseg)
	    max_melyseg = melyseg;
      for (int i = 0; i < melyseg; ++i)
	    printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek,
	      melyseg);

      kiir (elem->bal_nulla);
      kiir (elem->jobb_egy);

      --melyseg;
    }
}

]]>
</programlisting>  
<screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Welch/test$ ./z <adat.txt
000111011101101100001110

---/(1)
------0(2)
---------0(3)
------------0(4)
---------1(3)
------1(2)
---------0(3)
---------1(3)
------------0(4)
---------------1(5)
------------1(4)


 ]]>
        </screen>

      <para>Postorder bejárás pedig a preorder ellentetje, tehát ekkor a gyökérelem bal oldali részfáját járjuk be először, utána a jobb oldalit és ezután dolgozzuk 
        fel a gyökérelemet.
      </para>
 
<programlisting language="c">
    <![CDATA[ 

void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > max_melyseg)
	    max_melyseg = melyseg;

      kiir (elem->bal_nulla);
      kiir (elem->jobb_egy);

      for (int i = 0; i < melyseg; ++i)
	    printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek,
	      melyseg);

      --melyseg;
    }
}

]]> 
</programlisting>   
<screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Welch/test$ ./z <adat.txt000111011101101100001110

------------0(4)
---------0(3)
---------1(3)
------0(2)
---------0(3)
---------------1(5)
------------0(4)
------------1(4)
---------1(3)
------1(2)
---/(1)
 ]]>
 </screen>
</section> 

    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Welch/z3a7.cpp">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Welch/z3a7.cpp</link>               
        </para>

<programlisting language="c++">
    <![CDATA[ 

class LZWBinFa
{
public:
   LZWBinFa ():fa (&gyoker)
    {
    }
    ~LZWBinFa ()
    {
        szabadit (gyoker.egyesGyermek ());
        szabadit (gyoker.nullasGyermek ());
    }

    void operator<< (char b) 
    {
        
        if (b == '0')
        {
          
            if (!fa->nullasGyermek ())
            {
                
                Csomopont *uj = new Csomopont ('0');
                fa->ujNullasGyermek (uj);
                fa = &gyoker;
            }
            else			
            {
                
                fa = fa->nullasGyermek ();
            }
        }
       
        else
        {
            if (!fa->egyesGyermek ())
            {
                Csomopont *uj = new Csomopont ('1');
                fa->ujEgyesGyermek (uj);
                fa = &gyoker;
            }
            else
            {
                fa = fa->egyesGyermek ();
            }
        }
    }

]]> 
</programlisting>   

<para>
  Ebben az osztályban a fa gyökere nem mutató, hanem egy objektum, a fa a mutató, ami mindig az épülő fa aktuális csomópontjára mutat. 
  Az LZWBinFa konstruktor ráállítja a fa mutatót a gyökérre, a dekonstruktorban pedig felszabadítjuk a gyoker gyerekeit. 
  Tagfüggvényként túlterheljük a <screen><![CDATA[<<]]> </screen> operátort és az inputot eszerint tesszük a fába.
  Ha a bemenő karakter 0, akkor megnézzük, hogy az aktuális csomópontnak van-e 0-ás gyermeke, tehát a fa mutató éppen rá mutat-e. 
  Ha nincs, akkor példányosítjuk a '0' betűt, új csomópontot hozunk étre. Ezután az aktuális csomópont nullás gyermekét ráállítjuk az új csomópontjra és 
  a fával visszaállunk a gyökérre.
  Ha van nullás gyerkmek, akkor a fa mutatót ráállítjuk. '1' es karakter esetén ugyanez játszódik le.
</para>

<programlisting language="c++">
    <![CDATA[ 
private:
 class Csomopont
    {
    public:
        Csomopont (char b = '/'):betu (b), balNulla (0), jobbEgy (0)
        {
        };
        ~Csomopont ()
        {
        };
        
        Csomopont *nullasGyermek () const
        {
            return balNulla;
        }
        
        Csomopont *egyesGyermek () const
        {
            return jobbEgy;
        }
        
        void ujNullasGyermek (Csomopont * gy)
        {
            balNulla = gy;
        }
        
        void ujEgyesGyermek (Csomopont * gy)
        {
            jobbEgy = gy;
        }
       
        char getBetu () const
        {
            return betu;
        }

    private:
        char betu;
        
        Csomopont *balNulla;
        Csomopont *jobbEgy;

        Csomopont (const Csomopont &); //másoló konstruktor
        Csomopont & operator= (const Csomopont &);
    };

]]> 
</programlisting>   

<para>
    A beágyazott Csomopont osztály privát, hogy csak az LZWBinFa osztályon belül tudjuk elérni.
    A paraméter nélküli konstruktor az alapértelmezett '/' betűvel hozza létre a csomópontot. Ilyet hívunk a fából, 
    aki tagként tartalmazza a gyökeret, mert ha más betűvel hívjuk meg, akkor azt teszi a betű tagba, a két gyerkmekre mutató mutatót pedig nullra állítjuk. 
    Ezután függvények következnek, amik visszaadjak az aktuális csomópont jobb és bal gyermekét. A metódusok peddig arra szolgálnak, hogy az aktuális 
    csomópont akutális gyerekeit ráállítsák az új csomópontokra. Végül létrehozzuk a privát változókat, mutatókat és a másoló konstruktort, amit letiltunk.
</para>
<programlisting language="c++">
    <![CDATA[ 
int
main (int argc, char *argv[])
{
    
    if (argc != 4)
    {    
        usage ();
        return -1;
    }

    char *inFile = *++argv;
    if (*((*++argv) + 1) != 'o')
    {
        usage ();
        return -2;
    }
    std::fstream beFile (inFile, std::ios_base::in);
    if (!beFile)
    {
        std::cout << inFile << " nem letezik..." << std::endl;
        usage ();
        return -3;
    }

    std::fstream kiFile (*++argv, std::ios_base::out);

    unsigned char b;		
    LZWBinFa binFa;		
    while (beFile.read ((char *) &b, sizeof (unsigned char)))
    {
        for (int i = 0; i < 8; ++i)
        {    
            if (b & 0x80)
                binFa << '1';
            else
                binFa << '0';
            b <<= 1;
        }

    }
    kiFile << binFa;
    kiFile << "depth = " << binFa.getMelyseg () << std::endl;
    kiFile << "mean = " << binFa.getAtlag () << std::endl;
    kiFile << "var = " << binFa.getSzoras () << std::endl;

    kiFile.close ();
    beFile.close ();
    return 0;
}
]]> 
</programlisting>
<para>A main függvényben először ellenőrizzük, hogy helyen bemenetet kaptunk parancssorból, 
  majd létrehozzuk a binFa objektumot és a b változóba olvassuk be bejövő fájl bájtjait. Eztuán következik az adatok beolvasása 
  fájlból, amit binárisan olvasunk be, for ciklussal megnézzük egyenként a b-ben lévő bájt bitjeit. Ha a végigmegyünk a biteken és végig 0 lesz, kivéve a vége az 
  0 vagy 1, akkor aszerint tesszük a fába az '1' vagy '0' betűt. Végül a kimeneti csatornába egy fájlba kiirjuk a fát, illetve pár adatot a megépült fáról: magasság, szórás, átlag.
</para>   
<para>Futtatáskor meg kell adni egy fájlt amiból olvas és a kimenő fájl nevét, amiben a fát írja ki.</para>
<screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Welch$ g++ z3a7.cpp -o fa
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Welch$ ./fa adat.txt -o test.txt
 ]]>
 </screen>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Welch/z3a8.cpp">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Welch/z3a8.cpp</link>  
        </para>
         <para>Tutoriált: Loós Tamás</para>  

<para>
  Az előző forrásban a gyökéret mint objektumot kezeltük. A fa mutatót egyszerűen ráállítjuk a gyökérre a konstruktorban, amit alul hozunk létre.
</para>
<para>
  Azonban most a gyökér is mutató lesz, ezért az előző forrásban mindenhol ahol referenciaként adtuk át a gyökeret a fa mutatónak, 
  ott csak simán referencia nélkül tesszük. Továbbá a konstruktorban a gyökeret példányosítjuk, helyet foglalul a memóriában és erre állítjuk a fát rá.
  Valamint a szabadításkor pont helyet nyilat használunk ha mutató mutatóit kell elérni.

</para>
<programlisting language="c">
    <![CDATA[ 
public:
    
   LZWBinFa ()
    {
		gyoker = new Csomopont();
		fa = gyoker;
    }
    ~LZWBinFa ()
    {
		
        szabadit (gyoker->egyesGyermek ());
        szabadit (gyoker->nullasGyermek ());
        delete gyoker;
    }
]]> 
</programlisting> 
<programlisting language="c">
    <![CDATA[ 
protected:			
    Csomopont *gyoker;
};
]]> 
</programlisting> 

    </section>                     

    <section>
        <title>Mozgató szemantika</title>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Welch/z3a11.cpp">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Welch/z3a11.cpp</link>   
        </para>
            <para>
                Az előző feladatot továbbfejlesztve, megalkotjuk a mozgató konstruktort. 
                Paraméterként átadjuk a régi fát, az új fa gyökerét null-ra állítjuk, majd a move függvénnyt meghívjuk, amivel 
                mozgatjuk az elemeket. A mozgató értékadásban pedig megcseréljük az új és a régi fa gyökerét swap függvény segítségével, ezzel 
                kinullázva a régit.
            </para>

  <programlisting language="c++">
    <![CDATA[ 
LZWBinFa ( LZWBinFa && regi ) {
          std::cout << "LZWBinFa move ctor" << std::endl;

          gyoker = nullptr;
          *this = std::move (regi);

     }
LZWBinFa & operator= ( LZWBinFa && regi) 
     {			
			
          std::swap(gyoker,regi.gyoker);
          return *this;
			
	    }
]]> 
</programlisting> 
<para>Alább láthatunk három példát, hogy ahol a mozgató konstruktort használjuk.
  Másoló konstruktorral lemásoljuk az eredeti fát kétszer és azokat megcseréljük. Egy vektorba rakjuk rakjuk a fát, illetve egy 
  új fát hozunk létre mozgató konstruktor segítségével.
</para>
  <programlisting language="c">
    <![CDATA[ 
	LZWBinFa binFa2 =  binFa;
	LZWBinFa binFa4=  binFa;

	std::cout <<"Swap" << std::endl;
	std::swap(binFa2,binFa4);

	
	std::vector<LZWBinFa> v;
     std::cout <<"Vector" << std::endl;
	v.push_back(std::move (binFa ));

	std::cout <<"Új fa" << std::endl;
     LZWBinFa binFa3 = std::move (binFa2);
]]> 
</programlisting> 
<para>Futtatáskor láthatjuk, mikor melyik konstruktor lép működésbe és hányszor.</para>
          <screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Welch$ g++ z3a11.cpp -o fa
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Welch$ ./fa adat.txt -o output
LZWBinFa copy ctor
LZWBinFa copy ctor
Swap
LZWBinFa move ctor
Vector
LZWBinFa move ctor
Új fa
LZWBinFa move ctor

 ]]>
 </screen>
    </section>                     

</chapter>                
