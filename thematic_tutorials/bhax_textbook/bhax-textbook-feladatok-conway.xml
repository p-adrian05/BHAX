<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/10/10/myrmecologist">https://bhaxor.blog.hu/2018/10/10/myrmecologist</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> 
          <mediaobject>
    <imageobject>
            <imagedata fileref="img/uml.png" scale="60" />
            </imageobject>
     </mediaobject>
     <para>
         Az Ant osztályba a hanyga tulajdonságai vannak meghatározva. Az x és y a koordinátái, a dir pedig az irány amibe 
         tart. A + jel azt jelenti, hogy public elérésű, tehát az osztályon kívűl is látszódik, elérhető. A - pedig private, tehát  
         Az ants egy vektor, ami a hangyákat tárolja.
     </para>
     <para>
         Az AntWin osztályban a width és height tulajdonság az ablak szélessége, magassága pixelekben, a cellwidth és cellheigth pedig a pixelek vagy cellák 
         szélessége,magassága amiben a hangyák vannak ábrázolva, megjelenítve. Az antThread az ablaknak egy szála amivel a hangyaszámításokat végzi. 
         A grids a két rácsot jelenti, a gridldx pedig a a két rácspont közül egyet tárol. A max és min pedig a min 1 és max 255 feromon lehetséges értékét jelenti.
         A függvények közül ott van a konstruktor és a destruktor. A closeEvent() a kikapcsolási esemény ami meghívja az AntThread osztályból a finish() metódust ami leállítja az ablakot a running hamis értékre állításával, 
         keyPressEvent() a gombnyomásokat dolgozza fel, a paintEvent() 
         pedig a hangyák színezését alakítja.
     </para>
     <para>
         Az AntThread osztályban a tulajdonságok hasonlóak mint az AntWinben, kiegészítve párral. Az evaporation párolgás mértékét tárolja, feromonok száma, 
         hangyák száma egy cellában. A funkcióknál konstruktor és a destruktor, publikus funkciók mint a run() és finish(), illetve az isRunning függvény, ami visszaad egy igaz vagy hamist.
         Nem publikus, private függvények pl feromonok beállítására a setPheromone(), hangya mozgatáshoz MoveAnts(), új irány megadása newDir()-el.
     </para>

    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Conway/Sejtautomata.java">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Conway/Sejtautomata.java</link>
               
        </para>
        <para>
            A John Horton Conway féle életjáték szabályai egyszerűek. Van egy élettért, ami cellákból áll és cellánként egy sejt él.
            Egy élő sejt akkor marad élő, ha kettő vagy három élő szomszédja van, különben halott lesz.
             A halott sejt pedig halott marad, ha három élő szomszédja van, különben élő lesz.
            Ezek a szabályok vannak megfogalmazva a követkető metódusban.
        </para>
            <programlisting language="java"><![CDATA[
        
public void időFejlődés() {
        
        boolean [][] rácsElőtte = rácsok[rácsIndex];
        boolean [][] rácsUtána = rácsok[(rácsIndex+1)%2];
        
        for(int i=0; i<rácsElőtte.length; ++i) { // sorok
            for(int j=0; j<rácsElőtte[0].length; ++j) { // oszlopok
                
                int élők = szomszédokSzáma(rácsElőtte, i, j, ÉLŐ);
                
                if(rácsElőtte[i][j] == ÉLŐ) {
                /* Élő élő marad, ha kettő vagy három élő
                 szomszedja van, különben halott lesz. */
                    if(élők==2 || élők==3)
                        rácsUtána[i][j] = ÉLŐ;
                    else
                        rácsUtána[i][j] = HALOTT;
                }  else {
                /* Halott halott marad, ha három élő
                 szomszedja van, különben élő lesz. */
                    if(élők==3)
                        rácsUtána[i][j] = ÉLŐ;
                    else
                        rácsUtána[i][j] = HALOTT;
                }
            }
        }
        rácsIndex = (rácsIndex+1)%2;
    }
}]]></programlisting>



    <para>
        A sejttérben élőlényeket helyezünk el, ez a sikló. Adott irányba halad, másolja magát a sejttérben.
        A rács kettő dimenziós tömbbe helyezzük ez az állatkát. Az x érték a befoglaló tégla bal felső sarkának 
        oszlopa, az y pedig a bal felső sarkának sora.
    </para>
                <programlisting language="java"><![CDATA[
public void sikló(boolean [][] rács, int x, int y) {
        
        rács[y+ 0][x+ 2] = ÉLŐ;
        rács[y+ 1][x+ 1] = ÉLŐ;
        rács[y+ 2][x+ 1] = ÉLŐ;
        rács[y+ 2][x+ 2] = ÉLŐ;
        rács[y+ 2][x+ 3] = ÉLŐ;
        
    }]]></programlisting>
    <para>
    A sikló ágyú adott irányba lövi ki a fenti siklókat, a rács lesz ahova helyezzük a siklót, az x és y pedig a tégla 
    bal felső sarkának oszlopa, illetve sora.
</para>
    <programlisting language="java"><![CDATA[
        
public void siklóKilövő(boolean [][] rács, int x, int y) {
        
        rács[y+ 6][x+ 0] = ÉLŐ;
        rács[y+ 6][x+ 1] = ÉLŐ;
        rács[y+ 7][x+ 0] = ÉLŐ;
        rács[y+ 7][x+ 1] = ÉLŐ;
        
        rács[y+ 3][x+ 13] = ÉLŐ;
        
        rács[y+ 4][x+ 12] = ÉLŐ;
        rács[y+ 4][x+ 14] = ÉLŐ;
        
        rács[y+ 5][x+ 11] = ÉLŐ;
        rács[y+ 5][x+ 15] = ÉLŐ;
        rács[y+ 5][x+ 16] = ÉLŐ;
        rács[y+ 5][x+ 25] = ÉLŐ;
        
        rács[y+ 6][x+ 11] = ÉLŐ;
        rács[y+ 6][x+ 15] = ÉLŐ;
        rács[y+ 6][x+ 16] = ÉLŐ;
        rács[y+ 6][x+ 22] = ÉLŐ;
        rács[y+ 6][x+ 23] = ÉLŐ;
        rács[y+ 6][x+ 24] = ÉLŐ;
        rács[y+ 6][x+ 25] = ÉLŐ;
        
        rács[y+ 7][x+ 11] = ÉLŐ;
        rács[y+ 7][x+ 15] = ÉLŐ;
        rács[y+ 7][x+ 16] = ÉLŐ;
        rács[y+ 7][x+ 21] = ÉLŐ;
        rács[y+ 7][x+ 22] = ÉLŐ;
        rács[y+ 7][x+ 23] = ÉLŐ;
        rács[y+ 7][x+ 24] = ÉLŐ;
        
        rács[y+ 8][x+ 12] = ÉLŐ;
        rács[y+ 8][x+ 14] = ÉLŐ;
        rács[y+ 8][x+ 21] = ÉLŐ;
        rács[y+ 8][x+ 24] = ÉLŐ;
        rács[y+ 8][x+ 34] = ÉLŐ;
        rács[y+ 8][x+ 35] = ÉLŐ;
        
        rács[y+ 9][x+ 13] = ÉLŐ;
        rács[y+ 9][x+ 21] = ÉLŐ;
        rács[y+ 9][x+ 22] = ÉLŐ;
        rács[y+ 9][x+ 23] = ÉLŐ;
        rács[y+ 9][x+ 24] = ÉLŐ;
        rács[y+ 9][x+ 34] = ÉLŐ;
        rács[y+ 9][x+ 35] = ÉLŐ;
        
        rács[y+ 10][x+ 22] = ÉLŐ;
        rács[y+ 10][x+ 23] = ÉLŐ;
        rács[y+ 10][x+ 24] = ÉLŐ;
        rács[y+ 10][x+ 25] = ÉLŐ;
        
        rács[y+ 11][x+ 25] = ÉLŐ;
        
    }]]></programlisting>
    <para>Az egész programot, minden funkciójával együtt egy objektumként írjuk meg, majd a main függvényben 
            példányosítjuk, paraméterként átadva az objektum konstruktorának az oszlop és sor méretet.
    </para>

                    <programlisting language="java"><![CDATA[
 public static void main(String[] args) {

        new Sejtautomata(100, 75);
    }
}       
        
    }]]></programlisting>

    <para>
        Fordításkor, futtatáskor java fordítóját használjuk illetve a szövegkódolást UTF 8-ra állítva:
    </para>
    <screen><![CDATA[
 javac -encoding UTF-8 Sejtautomata.java
 java Sejtautomata
    ]]></screen>
    <mediaobject>
    <imageobject>
            <imagedata fileref="img/sejtautomata_java.jpg" scale="70" />
            </imageobject>
     </mediaobject>
     <para>
         S billentyű lenyomásával felvétel készül a sejttér állapotáról.
         N-el lehet a sejtek méretét növelni, k-val csökkenteni, g-vel lehet gyorsítani a szimulációt és i-vel lassítani.
         Az egérmutató jobb vagy bal gombjával egy sejt állapotát az ellenkezőjére változtatjuk. Az egérmutató vonszolásával az érintett sejteket élő állapotba kapcsoljuk.
     </para>
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Conway/sejtautomata_c%2B%2B">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Conway/sejtautomata_c%2B%2B</link>            
        </para>
        <para>
            A szabály implementálása ugyanúgy mint javaban:
        </para>
        <programlisting language="c++"><![CDATA[
void SejtSzal::idoFejlodes() {

    bool **racsElotte = racsok[racsIndex];
    bool **racsUtana = racsok[(racsIndex+1)%2];

    for(int i=0; i<magassag; ++i) { // sorok
        for(int j=0; j<szelesseg; ++j) { // oszlopok

            int elok = szomszedokSzama(racsElotte, i, j, SejtAblak::ELO);

            if(racsElotte[i][j] == SejtAblak::ELO) {
                
                if(elok==2 || elok==3)
                    racsUtana[i][j] = SejtAblak::ELO;
                else
                    racsUtana[i][j] = SejtAblak::HALOTT;
            }  else {
               
                if(elok==3)
                    racsUtana[i][j] = SejtAblak::ELO;
                else
                    racsUtana[i][j] = SejtAblak::HALOTT;
            }
        }
    }
    racsIndex = (racsIndex+1)%2;
}
]]></programlisting> 
<para>Sikló:</para>   
         <programlisting language="c++"><![CDATA[
void SejtAblak::siklo(bool **racs, int x, int y) {
  
  racs[y+ 0][x+ 2] = ELO;
  racs[y+ 1][x+ 1] = ELO;
  racs[y+ 2][x+ 1] = ELO;
  racs[y+ 2][x+ 2] = ELO;
  racs[y+ 2][x+ 3] = ELO;
  
}
]]></programlisting> 
    <para>Siklókilövő</para>
      <programlisting language="c++"><![CDATA[
void SejtAblak::sikloKilovo(bool **racs, int x, int y) {
  
  racs[y+ 6][x+ 0] = ELO;
  racs[y+ 6][x+ 1] = ELO;
  racs[y+ 7][x+ 0] = ELO;
  racs[y+ 7][x+ 1] = ELO;
  
  racs[y+ 3][x+ 13] = ELO;
  
  racs[y+ 4][x+ 12] = ELO;
  racs[y+ 4][x+ 14] = ELO;
  
  racs[y+ 5][x+ 11] = ELO;
  racs[y+ 5][x+ 15] = ELO;
  racs[y+ 5][x+ 16] = ELO;
  racs[y+ 5][x+ 25] = ELO;
  
  racs[y+ 6][x+ 11] = ELO;
  racs[y+ 6][x+ 15] = ELO;
  racs[y+ 6][x+ 16] = ELO;
  racs[y+ 6][x+ 22] = ELO;
  racs[y+ 6][x+ 23] = ELO;
  racs[y+ 6][x+ 24] = ELO;
  racs[y+ 6][x+ 25] = ELO;
  
  racs[y+ 7][x+ 11] = ELO;
  racs[y+ 7][x+ 15] = ELO;
  racs[y+ 7][x+ 16] = ELO;
  racs[y+ 7][x+ 21] = ELO;
  racs[y+ 7][x+ 22] = ELO;
  racs[y+ 7][x+ 23] = ELO;
  racs[y+ 7][x+ 24] = ELO;
  
  racs[y+ 8][x+ 12] = ELO;
  racs[y+ 8][x+ 14] = ELO;
  racs[y+ 8][x+ 21] = ELO;
  racs[y+ 8][x+ 24] = ELO;
  racs[y+ 8][x+ 34] = ELO;
  racs[y+ 8][x+ 35] = ELO;
  
  racs[y+ 9][x+ 13] = ELO;
  racs[y+ 9][x+ 21] = ELO;
  racs[y+ 9][x+ 22] = ELO;
  racs[y+ 9][x+ 23] = ELO;
  racs[y+ 9][x+ 24] = ELO;
  racs[y+ 9][x+ 34] = ELO;
  racs[y+ 9][x+ 35] = ELO;
  
  racs[y+ 10][x+ 22] = ELO;
  racs[y+ 10][x+ 23] = ELO;
  racs[y+ 10][x+ 24] = ELO;
  racs[y+ 10][x+ 25] = ELO;
  
  racs[y+ 11][x+ 25] = ELO;
  
}
]]></programlisting> 
<programlisting language="c++"><![CDATA[
#include <QApplication>
#include "sejtablak.h"
#include <QDesktopWidget>

int main(int argc, char *argv[])
{
  QApplication a(argc, argv);
  SejtAblak w(100, 75);
  w.show();
  
  return a.exec();
}
]]></programlisting> 

    <para>C++-nál használjuk a QT keretrendszert, ezért fordításkor másképp kell eljárni.A <command>qmake -project</command> parancssal
        a .pro fájlt generálja le amibe a programot foglalja be, majd ezt futtatjuk, ami a makefile-t generálja le a fordításhoz és a <command>make</command> parancs
        fordítja le a programot. A futtatás ugyanúgy zajlik.
    </para>
     <screen><![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Conway/sejtautomata_c++$ qmake -project
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Conway/sejtautomata_c++$ qmake sejtautomata_c++.pro
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Conway/sejtautomata_c++$ make
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Conway/sejtautomata_c++$ ./sejtautomata_c++ 

    ]]></screen>
     <mediaobject>
    <imageobject>
            <imagedata fileref="img/sejtautomata_cpp.png" scale="70" />
            </imageobject>
     </mediaobject>

    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        

</chapter>                
