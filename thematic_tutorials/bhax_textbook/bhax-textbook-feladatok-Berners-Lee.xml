<chapter xmlns="http://docbook.org/ns/docbook" 
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Berners-Lee!</title>
    </info>

    <para>C++: Benedek Zoltán, Levendovszky Tihamér Szoftverfejlesztés C++ nyelven</para>
    <para>Java: Nyékyné Dr. Gaizler Judit et al. Java 2 útikalauz programozóknak 5.0 I-II.</para>
    <para>Python: Forstner Bertalan, Ekler Péter, Kelényi Imre: Bevezetés a mobilprogramozásba. Gyors prototípus-fejlesztés Python és Java nyelven (35-51 oldal)</para>


    <section>
        <title>1.hét Az objektumorientált paradigma alapfoglamai.</title>
        <para>Osztály,objektum, példányosítás.</para>
        <para>
            Egy osztály azonos típusú dolgok modelljét írja le. A dolgok lehetnek a létező világ objektumai vagy 
            programok belső világához tartozó absztrakt objektumok is, például adatszerkezetek.
            Működés során az osztályokat példányosítjuk, objektumot hozunk létre, egy osztályból többet is. 
            Az objektum saját állapottal rendelkezik, ami műveletek hatására változhat.
            Az osztályokat két részből álló osztálydefiníció határozza meg. Az egyik rész deklarálja az objektum állapotát leíró változókat, 
            amiket példányváltozónak nevezünk. A másik rész pedig a metódusokat, függvényeket tartalmazza, amik az objektum viselkedését, 
            műveleteit határozza meg. A metódus meghívásakor meg kell adni melyik objektumra szeretnénk meghívni.
            Az objektumok fontos tulajdonsága az adatok elrejtése más osztályok, objektumok elől és az egységbezárás amit együtt
            adatabsztrakciónak nevezünk.
            Az objektum példányosítása a new operátorral történik meg. Ezzel memóriát foglal le az objektum és tartalma részére és visszaadja ezen tárterület
            kezdőcímét. Ezt a referenciát egy megfelelő osztály típusú változónak adhatjuk értékül. A referencia abban különbözik a C++ esetén lévő mutatótól, hogy a mutatott objektumot jelenti, nem pedig a címét.
             C++ esetén a delete operátorral ezt helyet tudjuk felszabadítani, java esetén erre nincs szükség mivel a JVM-ben található Garbage Collector felszabadítja 
            automatikusan azokat az objektumokat amire már nem hivatkozik semmi. A konstruktor pedig egy olyan sepciális tagfüggvény, amelynek neve megegyezik az osztály nevével és automatikusan
            meghívódik az osztály példányosításakor. A konstruktor építi fel az objektumot, abban az értelemben,
            hogy a törzsében megadott változókat inicializálja egy alapértelmezett értékre, vagy a paraméterként átadott értékekre.

        </para>
    </section>
    <section>
        <title>2.hét Öröklődés, osztályhierarchia.</title>
        <para>Polimorfizmus,metódustúlterhelés, hatáskörkezelés, a bezárási eszközrendszer, láthatósági szintek, absztrakt osztályok és interfészek. </para>

        <para>
            Az öröklődés legegyszerűbb esete, amikor egy osztályt egy már létező osztály kiterjesztésével definiálunk.
            A kiterjesztés jelentheti új műveletek és új változók bevezetését. Az eredeti osztályt szülőosztálynak nevezzük, a bővítettet pedig gyermekosztálynak. A gyermek örököl mindent a szülőosztálytól, amit a szülő megenged.
            Az öröklődés révén kódmegosztás jön létre, ezáltal csökken a kód redundanciája.Amikor felülírja a gyermekosztály a szülő függvényét Java esetén egy @Override annotációt kell a függvény fölé írni, C++ esetén pedig a virtual kulcsszót.
            Mivel a gyermek őseinek minden változójával és metódusával bír, minden környezetben használható, ahol ősei is, ezt nevezzük polimorfizmusnak (többalakúságnak).
            Az osztályok rokonsági viszonyainak összességét osztályhierarchiának hívjuk, amit gyakran mint fentről lefelé növő fát ábrázolnak. Java esetén az Object minden más osztálynak őse.
        </para>
        <para>
            Egy osztályban egy függvény, metódus vagy konstruktor túlterhelhető. Ez azt jelenti, hogy ugyanazon a névvel létrehozhatunk többet is belőlük, viszont fontos hogy paramétereik száma vagy sorrendje eltérjen.
            Ennek lényege, hogy különböző paramétereket átadva másképp viselkedjen az objektum. Ha nem adunk meg konstruktort az objektumnak, akkor automatikusan létrehoz egy üreset, viszont ha több konstrunktort hozunk létre, akkor kötelező egy 
            üreset is kétrehozni.
        </para>
        <para>
                Az osztály class kulcsszó előtt, az objektumban található függvények, metódusok, változók előtt szerepelhetnek módosítók. A public módosító azt jelenti, hogy az adott osztály hozzáférhető más csomagokhoz is vagy 
                elérhető az adott változó, függvény stb más osztályokból is, ennek ellentetje a private, ami esetén az kiterjesztett osztály sem fér hozzá.
                Private osztály is lehet, viszont csak belső inner osztályként definiálható, mivel csak így van értelme. Protected jelölés azt jelenti, hogy 
                egy osztályt nem lehet példányosítani, csak kiterjeszteni más osztály által és azt példányosítani. Változók, függvények esetén pedig csak azok férhetnek hozzá amelyek kiterjesztik az adott osztályt. C++ esetén létezik friend jelölés is, ekkor az így jelölt osztály 
                hozzáfér annak az osztály private és protected tagjaihoz, amelyik friendként deklarálta. Függvények esetén pedig olyan hozzáférést kapnak, mintha az adott osztály tagfüggvényei lennének.
                Ha pedig az osztály elé nem rakunk semmilyen kulcsszót, Java esetén package-private lesz az osztály, ami azt jelenti hogy csak az adott package-ben férhető hozzá más osztályok által, C++ esetén pedig alapértelmezetten private lesz.
                Változók, függvények esetén pedig alapértelmezetten az osztály módosítóját veszik figyelembe. A konstruktor minden esetben public, ha privatera állítjuk akkor nem lehet példányosítani az osztályt.
        </para>
        <para>
            Az absztrakt osztályok abban különböznek a nem absztrakt osztályoktól, hogy tartalmazhatnak absztrakt metódusokat. Az osztályhierarchia tetejét alkotó osztályok nagy részének 
            az a szerepe, hogy a leszármazottak interfészének közös metszetét definiálja, mintsem, hogy kész megvalósítást adjon. Ezeket absztrakt osztályoknak hívjuk.
        </para>


    </section>
</chapter>                
