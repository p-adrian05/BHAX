<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
       <title>A Mandelbrot halmaz</title>
        <para>
            Írj olyan C programot, amely kiszámolja a Mandelbrot halmazt!     
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/attention_raising/CUDA/mandelpngt.c%2B%2B">https://github.com/p-adrian05/BHAX/blob/master/attention_raising/CUDA/mandelpngt.c%2B%2B</link>
        </para>  
        <para>
            A Mandelbrot halmazt 1980-ban találta meg Benoit Mandelbrot a 
            komplex számsíkon. Komplex számok azok a számok, amelyek körében 
            válaszolni lehet az olyan egyébként értelmezhetetlen kérdésekre, 
            hogy melyik az a két szám, amelyet összeszorozva -9-et kapunk, 
            mert ez a szám például a 3i komplex szám.
        </para>
        <para>             
            A Mandelbrot halmazt úgy láthatjuk meg, hogy a sík origója középpontú 4 
            oldalhosszúságú négyzetbe lefektetünk egy, mondjuk 800x800-as 
            rácsot és kiszámoljuk, hogy a rács pontjai mely komplex számoknak 
            felelnek meg. A rács minden pontját megvizsgáljuk a 
            z<subscript>n+1</subscript>=z<subscript>n</subscript>
            <superscript>2</superscript>+c, 
            (0&lt;=n) képlet alapján úgy, hogy a c az éppen vizsgált rácspont. 
            A z0 az origó. Alkalmazva a képletet a 
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    z<subscript>0</subscript> = 0
                </para>
            </listitem>
            <listitem>
                <para>
                    z<subscript>1</subscript> = 0<superscript>2</superscript>+c = c
                </para>
            </listitem>
            <listitem>
                <para>
                    z<subscript>2</subscript> = c<superscript>2</superscript>+c
                </para>
            </listitem>
            <listitem>
                <para>
                    z<subscript>3</subscript> = (c<superscript>2</superscript>+c)<superscript>2</superscript>+c
                </para>
            </listitem>
            <listitem>
                <para>
                    z<subscript>4</subscript> = ((c<superscript>2</superscript>+c)<superscript>2</superscript>+c)<superscript>2</superscript>+c
                </para>
            </listitem>
            <listitem>
                <para>
                    ... s így tovább.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            Azaz kiindulunk az origóból (z<subscript>0</subscript>) 
            és elugrunk a rács első pontjába a z<subscript>1</subscript> = c-be, 
            aztán a c-től függően a további z-kbe. Ha ez az utazás kivezet a 
            2 sugarú körből, akkor azt mondjuk, hogy az a vizsgált rácspont 
            nem a Mandelbrot halmaz eleme. Nyilván nem tudunk végtelen sok 
            z-t megvizsgálni, ezért csak véges sok z elemet nézünk meg minden 
            rácsponthoz. Ha eközben nem lép ki a körből, akkor feketére 
            színezzük, hogy az a c rácspont a halmaz része. (Színes meg úgy 
            lesz a kép, hogy változatosan színezzük, például minél későbbi 
            z-nél lép ki a körből, annál sötétebbre). 
        </para> 
       
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/mandel.png" scale="50" />
            </imageobject>
        </mediaobject>
        <programlisting >
<![CDATA[#include <stdio.h>
#include <iostream>
#include "png++/png.hpp"
#include <sys/times.h>

#define MERET 600
#define ITER_HAT 32000
void
mandel (int kepadat[MERET][MERET]) {

   
    clock_t delta = clock ();
    struct tms tmsbuf1, tmsbuf2;
    times (&tmsbuf1);

    float a = -2.0, b = .7, c = -1.35, d = 1.35;
    int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

    
    float dx = (b - a) / szelesseg;
    float dy = (d - c) / magassag;
    float reC, imC, reZ, imZ, ujreZ, ujimZ;
 
    int iteracio = 0;

    for (int j = 0; j < magassag; ++j)
    {
        
        for (int k = 0; k < szelesseg; ++k)
        {
            reC = a + k * dx;
            imC = d - j * dy;
            // z_0 = 0 = (reZ, imZ)
            reZ = 0;
            imZ = 0;
            iteracio = 0;

            while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
            {
                // z_{n+1} = z_n * z_n + c
                ujreZ = reZ * reZ - imZ * imZ + reC;
                ujimZ = 2 * reZ * imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;
            }
            kepadat[j][k] = iteracio;
        }
    }

    times (&tmsbuf2);
    std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
              + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

    delta = clock () - delta;
    std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}

int
main (int argc, char *argv[])
{

    if (argc != 2)
    {
        std::cout << "Hasznalat: ./mandelpng fajlnev";
        return -1;
    }

    int kepadat[MERET][MERET];

    mandel(kepadat);

    png::image < png::rgb_pixel > kep (MERET, MERET);

    for (int j = 0; j < MERET; ++j)
    {
        for (int k = 0; k < MERET; ++k)
        {
            kep.set_pixel (k, j,
                png::rgb_pixel (255 -
                (255 * kepadat[j][k]) / ITER_HAT,
                 255 -
                (255 * kepadat[j][k]) / ITER_HAT,
                255 -
                (255 * kepadat[j][k]) / ITER_HAT));
        }
    }

    kep.write (argv[1]);
    std::cout << argv[1] << " mentve" << std::endl;

}
}]]>
</programlisting> 
 
   
<para>
            A void metódusban számoltatjuk ki az adatokat a mandelbrot halmaz képi megjelenítéséhez. Előtte definiáljuk a kép méretét és az iterációs határértéket.
        Ezután megmérjük mennyi idő alatt történik a számolás, majd megadjuk a számításhoz szükséges adatokat. Két for ciklussal végigmegyünk a 
        magasságon és szélességen és kiszámítjuk minden rács csomóponthoz tartozó komplex számot. A while ciklusban a z{n+1} = z_n * z_n + c iterációkat 
        számoljuk, míg a |z_n| kisebb mint 2 vagy az iterációk száma nem érte el a 255-t, ha viszont elértük, akkor ez az jelenti, hogy 
        a kiindulási c komplex számra az iteráció konvergens, tehát a c a mandelbrot halmaz eleme. Ezután kiiratjuk az eltelt időt, 
        majd a main-ben összeállítjuk a képet.
        </para>
        <para>Fordításkor használjuk a png könyvtárat a kép készítéséhez, majd futtatva megkapjuk a képet és az ehhez szükséges időtartamot.</para>
        <screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/attention_raising/CUDA$ g++ mandelpngt.c++ -lpng16  -o mandelpngt
adrian@adrian-MS-7817:~/Desktop/BHAX/attention_raising/CUDA$ ./mandelpngt t.png
1894
18.9422 sec
t.png mentve

 ]]>
         </screen> 


    </section>        
        
    <section>
         <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Írj olyan C++ programot, amely kiszámolja a Mandelbrot halmazt!                     
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/attention_raising/Mandelbrot/3.1.2.cpp">https://github.com/p-adrian05/BHAX/blob/master/attention_raising/Mandelbrot/3.1.2.cpp</link>               
        </para>    
        <para>Tutoriált: <link xlink:href="https://gitlab.com/whoisZORZ/bhax">Országh Levente</link></para>   
            <programlisting >
<![CDATA[#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      // k megy az oszlopokon

      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}]]>
</programlisting> 
 
<para>
    C++-ban a komplex számokkal való számoláshoz importálni kell a komplex osztályt. Az előző programhoz hasonlóan itt is 
    megadjuk a kép szélességét, magasságát, iterációs határt, számítás adatait, majd beolvassuk az argumentumként kapott adatokat és 
    azokkal dolgozunk. A for ciklusokkal megyünk végig a háló sorain és oszlopain. A reC és imC a háló rácspontjait számoljuk és a 
    rácspontokhoz tartozó komplex számokat a complex osztály segítségével. A while ciklus során, azt figyeljük, mennyire távolodik el a z_n a z_0 ponttól
    vagyis a koordinátarendszer középpontjától. Ha ez a távolság nagyobb lesz 2-nél, akkor a vizsgált c pontban az iteráció nem sűrűsödik be az origóhoz közeli 
    valamelyik pontban. Ha az iterációs harát elérése miatt lépünk ki a while ciklusból, akkor ebben a pontban az iteráció konvergens és a Mandelbrot 
    halmaz eleméneek tekintjük, és feketére szinezzük. Végül kimentjük a képet az argumentumban megadott névvel.
</para>
     <para>Fordításkor használjuk a png könyvtárat a kép készítéséhez.Futtatáskor pedig megadjuk az elkészült kép milyen nével jöjjön kétre és a számítás adatait.</para>
        <screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/attention_raising/Mandelbrot$ g++ 3.1.2.cpp -lpng -O3 -o 3.1.2
adrian@adrian-MS-7817:~/Desktop/BHAX/attention_raising/Mandelbrot$ ./3.1.2 mandel.png 1920 1080 1020 0.4127655418209589255340574709407519549131 0.4127655418245818053080142817634623497725 0.2135387051768746491386963270997512154281 0.2135387051804975289126531379224616102874
Szamitas
mandel.png mentve.
adrian@adrian-MS-7817:~/Desktop/BHAX/attention_raising/Mandelbrot$ 
 ]]>
        </screen> 
        <para>Ezekkel az adatokkal ezt az eredményt kapjuk:</para>
         <mediaobject>
            <imageobject>
                <imagedata fileref="img/mandel2.png" scale="20" />
            </imageobject>
        </mediaobject>

     <para>A következő adatokkal pedig ezt a képet kapjuk:</para>
     <screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/attention_raising/Mandelbrot$ ./3.1.2 mandel.png 1920 1080 2040 -0.01947381057309366392260585598705802112818 -0.0194738105725413418456426484226540196687 0.7985057569338268601555341774655971676111 0.79850575693437919611028519284445792436
Szamitas
mandel.png mentve.

 ]]>
        </screen> 
         <mediaobject>
            <imageobject>
                <imagedata fileref="img/mandel3.png" scale="20" />
            </imageobject>
        </mediaobject>

    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/attention_raising/Biomorf/3.1.3.cpp">https://github.com/p-adrian05/BHAX/blob/master/attention_raising/Biomorf/3.1.3.cpp</link>
        </para>
       <para>
            A biomorfokra (a Julia halmazokat rajzoló bug-os programjával) 
            rátaláló Clifford Pickover azt hitte természeti törvényre 
            bukkant: <link xlink:href="https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf">https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf</link> (lásd a 2307. oldal aljától).
        </para>       
        <para>
            A különbség a Mandelbrot halmaz és a Julia halmazok között az, hogy a komplex iterációban az előbbiben a c változó, utóbbiban viszont állandó. 
            A következő Mandelbrot csipet azt mutatja, hogy a c befutja a vizsgált összes rácspontot, minden rácsponthoz más értéket rendelve.
        </para>       
        <programlisting language="c++">
<![CDATA[  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }
]]>
        </programlisting>        
        <para>
            Ezzel szemben a Julia halmazos csipetben a c nem változik, hanem minden vizsgált z rácspontra ugyanaz.
        </para>
        <programlisting language="c++">
<![CDATA[    
    std::complex<double> c ( reC, imC );
    // j megy a sorokon
    for ( int j = 0; j < magassag; ++j )
    {
        // k megy az oszlopokon
        for ( int k = 0; k < szelesseg; ++k )
        {
            double reZ = a + k * dx;
            double imZ = d - j * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {
                z_n = std::pow(z_n, 3) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }
]]>
        </programlisting>                         
        
        <para>
            A bimorfos algoritmus pontos megismeréséhez ezt a cikket javasoljuk: 
            <link xlink:href="https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf">https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf</link>.
            Az is jó gyakorlat, ha magából ebből a cikkből from scratch kódoljuk be a sajátunkat, de mi a királyi úton járva a 
            korábbi Mandelbrot halmazt kiszámoló 
            forrásunkat módosítjuk. Viszont a program változóinak elnevezését összhangba hozzuk a közlemény jelöléseivel:
        </para>       
        <programlisting language="c++">
<![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> c ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + c;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + c;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}
]]>
        </programlisting> 

        <para>
            A c-t globális konstansként adjuk meg, ezért a rácspontokon való futás szerepét a z_n veszi át.
            A c értéket parancsorban adjuk át. Kiszámoljuk a most a z komplex számnak a valós részét és az imaginárius részét, majd ezekből 
            előállítjuk az aktuális rácsponthoz tartozó komplex számot. A c valós része 0.285, amit megadunk állandónak, ahogy a cikkben 
            szerepel az imaginárius rész pedig 0. A while ciklust for-ra cseréljük és ha ki kell lépni a rácspontból, miután kiugrik a kettő sugarú körből a z akkor kilépünk a ciklusból, de előtte 
            elmentjük ezt a helyet. A feltételben, ahogy Pickover "hibázott" vagy művelettel nézzük z-nek a valós és képzetes részét, ha az egyik rész nagyobb mint az R, ami 10 lesz a cikk szerint.
            Ezután jön a szinezés az iteráció változónak a felhasználásával.
        </para>
        <para>
            Fordításkor a használjuk a png könyvtárat és optimalizájuk 3. szinten, hogy gyors legyen.
            Futtatáskor megadjuk a globális változókat argumentumként.
        </para>
             <screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/attention_raising/Biomorf$ g++ 3.1.3.cpp -lpng -O3 -o 3.1.3
adrian@adrian-MS-7817:~/Desktop/BHAX/attention_raising/Biomorf$ ./3.1.3 bmorf.png 800 800 10 -2 2 -2 2 .285 0 10
Szamitas
bmorf.png mentve..

 ]]>
        </screen> 

        <mediaobject>
            <imageobject>
                <imagedata fileref="img/bmorf.png" scale="30" />
            </imageobject>
        </mediaobject>      
   
<para>
    Most változtatjuk a függvényt és ugyanúgy fordítjuk, futtatjuk.
</para>
    <screen>
<![CDATA[
z_n = std::pow(z_n, 2) + std::sin(z_n) + c;
 ]]>
     </screen> 
<mediaobject>
            <imageobject>
                <imagedata fileref="img/bmorf2.png" scale="30" />
            </imageobject>
</mediaobject>
      <screen>
<![CDATA[
z_n = std::pow(z_n, 2) + std::pow(z_n, 6) +c;
 ]]>
     </screen> 
<mediaobject>
            <imageobject>
                <imagedata fileref="img/bmorf3.png" scale="30" />
            </imageobject>
</mediaobject>
  <screen>
<![CDATA[
z_n = std::pow(z_n, 3) + c;
 ]]>
     </screen> 
     <para> És a c-t 1-re állítva:</para>
<mediaobject>
            <imageobject>
                <imagedata fileref="img/bmorf4.png" scale="30" />
            </imageobject>
</mediaobject>
    </section> 
                        

    <section>
         <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/attention_raising/CUDA/mandelpngc_60x60_100.cu">https://github.com/p-adrian05/BHAX/blob/master/attention_raising/CUDA/mandelpngc_60x60_100.cu</link>              
        </para>
        <para>
            A CUDA egy többszálas, párhuzamos feldolgozási platform és API, amit nvidia készített, ezért csak nvidia grafikus kártyákkal használható.
            Ennek segítségével tudunk számításokat végezni a GPU-val CPU helyett. Az első feladatban a mandelbrot halmaz kiszámításához 
            csak 1 szálon a CPU-t vettük igénybe ami közel 19 másodpercet vett igénybe.
        </para>
        <para>
            A CUDA-ban van egy rácsunk, amibe minden oszlopba és sorba berakunk 60db blokkot és blokkonként berakunk 100 szálat, így egyszerre fog számolni 
            60x60x100-at, 60db blokkban a 100 úgy jön ki, hogy 10x10. Mi esetünkben ki akarunk számolni egy 600x600 pixeles képet és ezt felhasználva minde pixelnek megfelel egy szál, így egyszerre számolódnak a 
            pixelek ellentétben a CPU-s verziónál, ahol 1 szálunk volt. 
        </para>
           <programlisting >
<![CDATA[#include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>

#include <sys/times.h>
#include <iostream>


#define MERET 600
#define ITER_HAT 32000

__device__ int
mandel (int k, int j)
{
  // Végigzongorázza a CUDA a szélesség x magasság rácsot:
  // most eppen a j. sor k. oszlopaban vagyunk

  // számítás adatai
  float a = -2.0, b = .7, c = -1.35, d = 1.35;
  int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

  // a számítás
  float dx = (b - a) / szelesseg;
  float dy = (d - c) / magassag;
  float reC, imC, reZ, imZ, ujreZ, ujimZ;
  // Hány iterációt csináltunk?
  int iteracio = 0;

  // c = (reC, imC) a rács csomópontjainak
  // megfelelő komplex szám
  reC = a + k * dx;
  imC = d - j * dy;
  // z_0 = 0 = (reZ, imZ)
  reZ = 0.0;
  imZ = 0.0;
  iteracio = 0;

  while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
      // z_{n+1} = z_n * z_n + c
      ujreZ = reZ * reZ - imZ * imZ + reC;
      ujimZ = 2 * reZ * imZ + imC;
      reZ = ujreZ;
      imZ = ujimZ;

      ++iteracio;

    }
  return iteracio;
}


/*
__global__ void
mandelkernel (int *kepadat)
{

  int j = blockIdx.x;
  int k = blockIdx.y;

  kepadat[j + k * MERET] = mandel (j, k);

}
*/

__global__ void
mandelkernel (int *kepadat)
{

  int tj = threadIdx.x;
  int tk = threadIdx.y;

  int j = blockIdx.x * 10 + tj;
  int k = blockIdx.y * 10 + tk;

  kepadat[j + k * MERET] = mandel (j, k);

}

void
cudamandel (int kepadat[MERET][MERET])
{

  int *device_kepadat;
  cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));

  // dim3 grid (MERET, MERET);
  // mandelkernel <<< grid, 1 >>> (device_kepadat);
  
  dim3 grid (MERET / 10, MERET / 10);
  dim3 tgrid (10, 10);
  mandelkernel <<< grid, tgrid >>> (device_kepadat);  
  
  cudaMemcpy (kepadat, device_kepadat,
	      MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
  cudaFree (device_kepadat);

}

int
main (int argc, char *argv[])
{

  // Mérünk időt (PP 64)
  clock_t delta = clock ();
  // Mérünk időt (PP 66)
  struct tms tmsbuf1, tmsbuf2;
  times (&tmsbuf1);

  if (argc != 2)
    {
      std::cout << "Hasznalat: ./mandelpngc fajlnev";
      return -1;
    }

  int kepadat[MERET][MERET];

  cudamandel (kepadat);

  png::image < png::rgb_pixel > kep (MERET, MERET);

  for (int j = 0; j < MERET; ++j)
    {
      //sor = j;
      for (int k = 0; k < MERET; ++k)
	{
	  kep.set_pixel (k, j,
			 png::rgb_pixel (255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT));
	}
    }
  kep.write (argv[1]);

  std::cout << argv[1] << " mentve" << std::endl;

  times (&tmsbuf2);
  std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

  delta = clock () - delta;
  std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}]]>
</programlisting> 
<para>A fordításhoz a következő, parancsot kell használni, nem a megszokott g++ fordítót:</para>
<screen>
<![CDATA[
nvcc mandelpngc_60x60_100.cu -lpng16 -03 -o mandelpngc
 ]]>
        </screen> 
<para> A program futtatásához nvidia kártyára van szükség, amivel nem rendelkezem, így nem tudjuk meg
    mennyivel lenne gyorsabb a CPU-hoz képest, de valahol 50-70 szeres gyorsulást lehet tapasztalni.
</para>
    </section>                     

    <section>
       <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
            Illetve <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>.        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Mandelbrot/c%2B%2B_nagyito">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Mandelbrot/c%2B%2B_nagyito</link> 
        </para>
<mediaobject>
            <imageobject>
                <imagedata fileref="img/utazo.png" scale="40" />
            </imageobject>
</mediaobject>
<mediaobject>
            <imageobject>
                <imagedata fileref="img/utazo2.png" scale="50" />
            </imageobject>
</mediaobject>
<mediaobject>
            <imageobject>
                <imagedata fileref="img/utazo3.png" scale="40" />
            </imageobject>
</mediaobject>
<mediaobject>
            <imageobject>
                <imagedata fileref="img/utazo4.png" scale="50" />
            </imageobject>
</mediaobject>
        <para>Fordítás, futtatáshoz használjuk a Qt keretrendszert, azon belül a qmake-kel készítjük el a make fájlt.</para> 
        <screen>
<![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Mandelbrot/c++_nagyito$ /home/adrian/Qt/5.12.2/gcc_64/bin/qmake frak.pro
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Mandelbrot/c++_nagyito$ make
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Mandelbrot/c++_nagyito$ ./frak
 ]]>
        </screen>      
<para>Ha a nagyítások során leromlott a pontosság, akkor az n gomb nyomásával növelni tudjuk a számítások iterációs határát.
       </para>

    </section>                     
                                                                                                                                                                            
    <section>
       <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Ui3B6IJnssY">https://youtu.be/Ui3B6IJnssY</link>, 4:27-től.
            Illetve <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Mandelbrot/java_nagyito">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Mandelbrot/java_nagyito</link>
        </para>

        <para>
            A következő képen a Mandelbrot halmaz utazó van bemutatva. A Mandelbrot halmazon belül egy pontra kattintva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat. Ezek azok a számok 
            amelyek nem mennek ki a végtelenbe.
            A MandelbrotHalmazNagyító.java programot kell fordítani javac paranccsal és futtatni a java paranccsal, majd jobb klikkel a kiválasztva a pontot a mandelbrot halmazon belül.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/iteracio.png" scale="50" />
            </imageobject>
</mediaobject>
    <para>
        Nagyításkor a program által kiszámolt Mandelbrot halmaz valamenyik részét nagyítjuk és annak is valamenyik részét és így tovább. Az egeren bal klikkel tudjuk kiválasztani a nagyítás helyét.
    </para >
     <mediaobject>
            <imageobject>
                <imagedata fileref="img/nagyito.png" scale="50" />
            </imageobject>
</mediaobject>
    <para>Ha a nagyítások során leromlott a pontosság, akkor az n gomb nyomásával növelni tudjuk a számítások iterációs határát.
        A program futása alatt az s billentyűt lenyomva a kiszámolt halmazról egy felvételt készít a program, amit ugyanabban a könyvtárba ment ahol a program van,</para>
<mediaobject>
            <imageobject>
                <imagedata fileref="img/nagyito2.png" scale="40" />
            </imageobject>
</mediaobject>
<mediaobject>
            <imageobject>
                <imagedata fileref="img/nagyito3.png" scale="50" />
            </imageobject>
</mediaobject>
    </section>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
