<chapter xmlns="http://docbook.org/ns/docbook" 
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Liskov!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Liskov helyettesítés sértése</title>
        <para>
        Írjunk olyan OO, leforduló Java és C++ kódcsipetet, amely megsérti a Liskov elvet! Mutassunk rá a megoldásra: jobb OO tervezés. 
        </para>
        <para>https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf (93-99 fólia) 
(számos példa szerepel az elv megsértésére az UDPROG repóban, lásd pl. source/binom/Batfai-Barki/madarak/) </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Liskov/Liskov_sertes">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Liskov/Liskov_sertes</link>
        </para>
        <para>
            A Liskov elv azt jelenti, hogy ha S egy olyan osztály, amely egy T osztály leszármazottja, akkor az S objektum behelyettesíthető minden olyan helyre, ahol T típust várunk, anélkül, hogy a programrész tulajdonságai megváltoznának.
            Tehát az alosztályoknak ugyanúgy kell viselkedniük mint a szülőosztály, viszont ha az altípus más kivételt vált ki, mint amit az alaptípust, akkor ez gondot okozhat olyan helyen ahol egy alaptípus viselkedésére van felkészülve a használó. 
            Általánosabban az altípusnak csak bővítenie szabad az alaptípus viselkedését, nem korlátozni.
        </para>
        <para>
            Az elvet sértő java kód esetében a négyzet osztály leszármazottja a téglalap osztálynak, azonban a téglalap (szülő) területének megfelelő értéke (50) helyett 
            25-öt kapunk, mivel a négyzet objektum másképp viselkedik mint a szülő típus, téglalap, mivel egyenlő a négyzet szélessége és hossza, hiába adunk meg különbőző értékeket.
        </para>
        <para>
             Ennek elkerülése érdekében alaposabban kell megtervezni az öröklődést. Gondolni kell a viselkedésre is nem csak a struktúrára.
        </para>

        <programlisting language="java">
            <![CDATA[ 

class Rectangle {
    private int height;
    private int width;

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public int getWidth() {
        return width;
    }

    public void setWidth(int width) {
        this.width = width;
    }

    public int getArea() {
        return this.height * this.width;
    }
}

class Square extends Rectangle {
    @Override
    public void setWidth(int width) {
        super.setWidth(width);
        super.setHeight(width);
    }

    @Override
    public void setHeight(int height) {
        super.setHeight(height);
        super.setWidth(height);
    }
}

public class LSP {
    public static void main(String args[]) {
        Rectangle rec = new Square();
        rec.setWidth(10);
        rec.setHeight(5);
        System.out.println(rec.getArea());
    }
}


]]>
        </programlisting>
        <screen>
            <![CDATA[
...BHAX\textbook_programs\Liskov\Liskov_sertes>javac LSP.java
...BHAX\textbook_programs\Liskov\Liskov_sertes>java LSP
25


 ]]>
        </screen>
        <para>
        Ugyanez a példa C++-ban.
        </para>
        <programlisting language="c++">
            <![CDATA[ 

#include <iostream>
class Rectangle
{

public:
    int r_height;
    int r_width;

    int getHeight()
    {
        return r_height;
    }

    virtual void setHeight(int height)
    {
        r_height = height;
    }

    int getWidth()
    {
        return r_width;
    }

    virtual void setWidth(int width)
    {
        r_width = width;
    }

    int getArea()
    {
        return r_width * r_height;
    }
};

class Square : public Rectangle
{

public:
    void setWidth(int width)
    {
        r_height = width;
        r_width = width;
    }

    void setHeight(int height)
    {
        r_height = height;
        r_width = height;
    }
};

int main()
{
    Rectangle *r = new Square();
    r->setWidth(10);
    r->setHeight(5);
    std::cout << r->getArea();
}


]]>
        </programlisting>
        <screen>
            <![CDATA[
...\BHAX\textbook_programs\Liskov\Liskov_sertes>g++ LSP.cpp -o LSP
...\BHAX\textbook_programs\Liskov\Liskov_sertes>LSP
25


 ]]>
        </screen>
    </section>
    <section>
        <title>Szülő-gyerek</title>
        <para>
       Írjunk Szülő-gyerek Java és C++ osztálydefiníciót, amelyben demonstrálni tudjuk, hogy az ősön keresztül csak az ős üzenetei küldhetőek!  </para>
        <para>
          https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf (98. fólia) </para>
        <para>
          Megoldás forrása:   <link xlink:href="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Liskov/SzuloGyerek">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Liskov/SzuloGyerek</link>
        </para>
        <para>
            A kiterjesztett osztályban definiált függvényeket az ősosztály nem éri el, ezért hiába hoztuk létre az ősosztály (Person) típusaként a Person2 objektumot. Ebben az esetben Person2 kasztolással érhető csak el 
            az alosztályban definiált függvény.
        </para>
        <programlisting language="java">
            <![CDATA[ 

class Person {
    protected int age;
    protected String name;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getAge() {
        return this.age;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

class Person2 extends Person {
    private String email;

    public Person2(String name, int age, String email) {
        super(name, age);
        this.email = email;
    }

    public String getEmail() {
        return this.email;
    }

}

class szuloGyerek {

    public static void main(String args[]) {
        Person person = new Person2("Pisti", 37, "email@email.com");

        System.out.println(person.getEmail());
        // System.out.println(((Person2) person).getEmail());
    }
}


]]>
        </programlisting>
        <screen>
            <![CDATA[
...BHAX\textbook_programs\Liskov\SzuloGyerek>javac szulogyerek.java
szulogyerek.java:46: error: cannot find symbol
        System.out.println(person.getEmail());
                                 ^
  symbol:   method getEmail()
  location: variable person of type Person
1 error
 ]]>
        </screen>
        <para>
        Ugyanez a példa C++-ban.
        </para>
        <programlisting language="c++">
            <![CDATA[ 

#include <iostream>
#include <string>
class Person
{
protected:
    int ageP;
    std::string nameP;

public:
    Person(std::string name, int age)
    {
        nameP = name;
        ageP = age;
    }

    void setAge(int age)
    {
        ageP = age;
    }

    std::string getName()
    {
        return nameP;
    }
    int getAge()
    {
        return ageP;
    }

    void setName(std::string name)
    {
        nameP = name;
    }
};

class Person2 : public Person
{
private:
    std::string emailP;

public:
    Person2(std::string name, int age, std::string email) : Person(name, age)
    {
        emailP = email;
    }
    std::string getEmail()
    {
        return emailP;
    }
};

int main()
{
    Person *person = new Person2("Pisti", 37, "email");
    td::cout << person->getEmail();
}

]]>
        </programlisting>
        <screen>
            <![CDATA[
...\BHAX\textbook_programs\Liskov\SzuloGyerek>g++ szulogyerek.cpp -o a
szulogyerek.cpp: In function 'int main()':
szulogyerek.cpp:56:26: error: 'class Person' has no member named 'getEmail'
     std::cout << person->getEmail();
                          ^
 ]]>
        </screen>
    </section>

    <section>
        <title>Anti OO</title>
        <para>
   A BBP algoritmussal a Pi hexadecimális kifejtésének a 0. pozíciótól számított 106, 107, 108 darab jegyét határozzuk meg C, C++, Java és C# nyelveken és vessük össze a futási időket! 
https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apas03.html#id561066   </para>
        <para>
          Megoldás forrása:  <link xlink:href="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Liskov/Anti_OO">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Liskov/Anti_OO</link>
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="img/tablazat.jpg" scale="70" />
            </imageobject>
        </mediaobject>
        <para>
         CPU: i5-4440 
        </para>
        <para>
        Java:
        </para>
        <screen>
            <![CDATA[
...\BHAX\textbook_programs\Liskov\Anti_OO>java PiBBPBench
6
1.639
...\BHAX\textbook_programs\Liskov\Anti_OO>java PiBBPBench
7
19.305
...\BHAX\textbook_programs\Liskov\Anti_OO>java PiBBPBench
12
225.121
                          
 ]]>
        </screen>
        <para>
        C#:
        </para>
        <screen>
            <![CDATA[
...\BHAX\textbook_programs\Liskov\Anti_OO>PiBBPBench.exe
6
1,6717391
...\BHAX\textbook_programs\Liskov\Anti_OO>PiBBPBench.exe
7
19,675768
...\BHAX\textbook_programs\Liskov\Anti_OO>PiBBPBench.exe
12
228,7670749
                          
 ]]>
        </screen>

        <para>
        C:
        </para>
        <screen>
            <![CDATA[
.../BHAX/textbook_programs/Liskov/Anti_OO$ ./pi
6
1.890325

...BHAX/textbook_programs/Liskov/Anti_OO$ ./pi
7
22.686366

.../BHAX/textbook_programs/Liskov/Anti_OO$ ./pi
12
264.254057
                          
 ]]>
        </screen>
        <para>
        C++:
        </para>
        <screen>
            <![CDATA[
.../BHAX/textbook_programs/Liskov/Anti_OO$ ./a
6
2.11241

.../BHAX/textbook_programs/Liskov/Anti_OO$ ./a
7
24.5971

.../BHAX/textbook_programs/Liskov/Anti_OO$ ./a
12
283.916


                          
 ]]>
        </screen>

    </section>

    <section>
        <title>Hello, Android!</title>
        <para>
Élesszük fel az SMNIST for Humans projektet! 
https://gitlab.com/nbatfai/smnist/tree/master/forHumans/SMNISTforHumansExp3/app/src/main Apró módosításokat eszközölj benne, pl. színvilág. 
        </para>
        <para>
          Megoldás forrása:  
        </para>
        <para>
           A projekt Android Studioban lett felélesztve. Egy üres projekt lett létrehozva, amibe a megfelelő fájlokat beillesztettem, felülírtam. 
           Az AndroidManifest.xml fájlban át kell állítani az SMNISTE3Activity fájlra az alapértelmezett indító fájlt. Továbbá ugyanebben a fájlban az android.support.v7.app.AppCompatActivity helyett az 
           androidx.appcompat.app.AppCompatActivity csomagból kell importálni a AppCompatActivity osztályt, mivel az app készülése óta már megváltozott a helye az SDK-ban.

        </para>
        <programlisting language="java">
            <![CDATA[ 
     <activity android:name=".SMNISTE3Activity">
<intent-filter>
<action android:name="android.intent.action.MAIN" />

<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
]]>
        </programlisting>

        <para>
            A színvilág, szöveg stílusának beállítása, a Paint osztály segítségével történik. A szöveg színét, méretét, elhelyezkedését, stílusát a textPaint objektum metódusaival állítható. 
            A msgPaint az eredmény, dotPaint a pontok, borderPaint pedig a kör tulajdonságait állítja.

        </para>

        <programlisting language="java">
            <![CDATA[ 
    android.graphics.Paint dotPaint = new android.graphics.Paint();
    android.graphics.Paint textPaint = new android.graphics.Paint();
    android.graphics.Paint msgPaint = new android.graphics.Paint();
    android.graphics.Paint fillPaint = new android.graphics.Paint();
    android.graphics.Paint borderPaint = new android.graphics.Paint();


    
  private void cinit(android.content.Context context) {

        textPaint.setColor(android.graphics.Color.RED);
        textPaint.setStyle(android.graphics.Paint.Style.FILL_AND_STROKE);
        textPaint.setAntiAlias(true);
        textPaint.setTextAlign(android.graphics.Paint.Align.CENTER);
        textPaint.setTextSize(40);

        msgPaint.setColor(android.graphics.Color.GREEN);
        msgPaint.setStyle(android.graphics.Paint.Style.FILL_AND_STROKE);
        msgPaint.setAntiAlias(true);
        msgPaint.setTextAlign(android.graphics.Paint.Align.LEFT);
        msgPaint.setTextSize(45);

        dotPaint.setColor(android.graphics.Color.WHITE);
        dotPaint.setStyle(android.graphics.Paint.Style.FILL_AND_STROKE);
        dotPaint.setAntiAlias(true);
        dotPaint.setTextAlign(android.graphics.Paint.Align.CENTER);
        dotPaint.setTextSize(50);

        borderPaint.setStrokeWidth(4);
        borderPaint.setColor(android.graphics.Color.BLUE);
        fillPaint.setStyle(android.graphics.Paint.Style.FILL);
        fillPaint.setColor(android.graphics.Color.WHITE);

    }

]]>
        </programlisting>
        <para>
           Az alkalmazás hátterszínének állítása pedig a Canvas osztállyal történik és drawColor metódusa teszi ezt meg, aminek átadunk egy rgb színkódot, de akár a bepített alapértelmezett színek is megadhatóak. 
        </para>
        <programlisting language="java">
            <![CDATA[ 
int[] bgColor =
            {
                    android.graphics.Color.rgb(40, 70, 42),
                    android.graphics.Color.rgb(32, 53, 24)
            };
            
 @Override
    public void onDraw(android.graphics.Canvas canvas) {

        if (surfaceHolder.getSurface().isValid()) {

            canvas.save();
            canvas.scale(scaleFactor, scaleFactor);

            canvas.drawColor(bgColor[bgIdx]);

            drawMeasurement(canvas);

            canvas.restore();
        }
    }

]]>
        </programlisting>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/smnist.jpg" scale="50" />
            </imageobject>
        </mediaobject>

    </section>

    <section>
        <title>Ciklomatikus komplexitás</title>
        <para>
        Számoljuk ki valamelyik programunk függvényeinek ciklomatikus komplexitását! Lásd a fogalom tekintetében a https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf (77-79 fóliát)! 
        </para>

        <para>
            A ciklomatikus komplexitás egy mérték ami a programok komplexitását adja meg. Ez a mérték a kódban lévő független utak száma alapján kerül kiszámításra a vezérlési gráfban.
            Független egy út ha legalább egy olyan éle van, ami nem része egy másik útnak. Ez alapján lehet mérni egy program, illetve azon belül függvények, metódusok bonyolultságát. Az alacsonyabb érték a jobb.
            Matematikai képlete: M = E − N + 2, ahol E az élek száma a gráfban, N a csomópontok száma. Például az If-then-else ábrázolása gráfként:
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/ciklo.png" scale="60" />
            </imageobject>
        </mediaobject>
        <para>
            Példaként használva az LZWBinfa kódot, megállapítva az egyes függvények komplexitását. Az alacsonyabb érték a jobb. Az addItem került ki a legkomplexebb metódusnak, ami várható volt.
        </para>
        <programlisting language="java">
            <![CDATA[ 

public void addItem(char newItem) {
        if (newItem == '0') {
            if (current.left() == null) {
                current.setLeft(new Node('0'));
                setCurrent(root);
            } else {
                setCurrent(current.left());
            }
        }

        if (newItem == '1') {
            if (current.right() == null) {
                current.setRight(new Node('1'));
                setCurrent(root);
            } else {
                setCurrent(current.right());
            }
        }

    }

]]>
        </programlisting>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/ciklomatik.jpg" scale="80" />
            </imageobject>
        </mediaobject>
    </section>
</chapter>                
