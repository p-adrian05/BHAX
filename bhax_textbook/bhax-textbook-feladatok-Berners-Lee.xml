<chapter xmlns="http://docbook.org/ns/docbook" 
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Berners-Lee!</title>
    </info>

    <para>C++: Benedek Zoltán, Levendovszky Tihamér Szoftverfejlesztés C++ nyelven</para>
    <para>Java: Nyékyné Dr. Gaizler Judit et al. Java 2 útikalauz programozóknak 5.0 I-II.</para>
    <para>Python: Forstner Bertalan, Ekler Péter, Kelényi Imre: Bevezetés a mobilprogramozásba. Gyors prototípus-fejlesztés Python és Java nyelven (35-51 oldal)</para>


    <section>
        <title>1.hét Az objektumorientált paradigma alapfoglamai.</title>
        <para>Osztály,objektum, példányosítás.</para>
        <para>
            Egy osztály azonos típusú dolgok modelljét írja le. A dolgok lehetnek a létező világ objektumai vagy 
            programok belső világához tartozó absztrakt objektumok is, például adatszerkezetek.
            Működés során az osztályokat példányosítjuk, objektumot hozunk létre, egy osztályból többet is. 
            Az objektum saját állapottal rendelkezik, ami műveletek hatására változhat.
            Az osztályokat két részből álló osztálydefiníció határozza meg. Az egyik rész deklarálja az objektum állapotát leíró változókat, 
            amiket példányváltozónak nevezünk. A másik rész pedig a metódusokat, függvényeket tartalmazza, amik az objektum viselkedését, 
            műveleteit határozza meg. A metódus meghívásakor meg kell adni melyik objektumra szeretnénk meghívni.
            Az objektumok fontos tulajdonsága az adatok elrejtése más osztályok, objektumok elől és az egységbezárás amit együtt
            adatabsztrakciónak nevezünk.
            Az objektum példányosítása a new operátorral történik meg. Ezzel memóriát foglal le az objektum és tartalma részére és visszaadja ezen tárterület
            kezdőcímét. Ezt a referenciát egy megfelelő osztály típusú változónak adhatjuk értékül. A referencia abban különbözik a C++ esetén lévő mutatótól, hogy a mutatott objektumot jelenti, nem pedig a címét.
             C++ esetén a delete operátorral ezt helyet tudjuk felszabadítani, java esetén erre nincs szükség mivel a JVM-ben található Garbage Collector felszabadítja 
            automatikusan azokat az objektumokat amire már nem hivatkozik semmi. A konstruktor pedig egy olyan sepciális tagfüggvény, amelynek neve megegyezik az osztály nevével és automatikusan
            meghívódik az osztály példányosításakor. A konstruktor építi fel az objektumot, abban az értelemben,
            hogy a törzsében megadott változókat inicializálja egy alapértelmezett értékre, vagy a paraméterként átadott értékekre.

        </para>
    </section>
    <section>
        <title>2.hét Öröklődés, osztályhierarchia.</title>
        <para>Polimorfizmus, metódustúlterhelés, hatáskörkezelés, a bezárási eszközrendszer, láthatósági szintek, absztrakt osztályok és interfészek. </para>

        <para>
            Az öröklődés legegyszerűbb esete, amikor egy osztályt egy már létező osztály kiterjesztésével definiálunk.
            A kiterjesztés jelentheti új műveletek és új változók bevezetését. Az eredeti osztályt szülőosztálynak nevezzük, a bővítettet pedig gyermekosztálynak. A gyermek örököl mindent a szülőosztálytól, amit a szülő megenged.
            Az öröklődés révén kódmegosztás jön létre, ezáltal csökken a kód redundanciája.Amikor felülírja a gyermekosztály a szülő függvényét Java esetén egy @Override annotációt kell a függvény fölé írni, C++ esetén pedig a virtual kulcsszót.
            Mivel a gyermek őseinek minden változójával és metódusával bír, minden környezetben használható, ahol ősei is, ezt nevezzük polimorfizmusnak (többalakúságnak).
            Az osztályok rokonsági viszonyainak összességét osztályhierarchiának hívjuk, amit gyakran mint fentről lefelé növő fát ábrázolnak. Java esetén az Object minden más osztálynak őse.
        </para>
        <para>
            Egy osztályban egy függvény, metódus vagy konstruktor túlterhelhető. Ez azt jelenti, hogy ugyanazon a névvel létrehozhatunk többet is belőlük, viszont fontos hogy paramétereik száma vagy sorrendje eltérjen.
            Ennek lényege, hogy különböző paramétereket átadva másképp viselkedjen az objektum. Ha nem adunk meg konstruktort az objektumnak, akkor automatikusan létrehoz egy üreset, viszont ha több konstrunktort hozunk létre, akkor kötelező egy 
            üreset is kétrehozni.
        </para>
        <para>
                Az osztály class kulcsszó előtt, az objektumban található függvények, metódusok, változók előtt szerepelhetnek módosítók. A public módosító azt jelenti, hogy az adott osztály hozzáférhető más csomagokhoz is vagy 
                elérhető az adott változó, függvény stb más osztályokból is, ennek ellentetje a private, ami esetén az kiterjesztett osztály sem fér hozzá.
                Private osztály is lehet, viszont csak belső inner osztályként definiálható, mivel csak így van értelme. Protected jelölés azt jelenti, hogy 
                egy osztályt nem lehet példányosítani, csak kiterjeszteni más osztály által és azt példányosítani. Változók, függvények esetén pedig csak azok férhetnek hozzá amelyek kiterjesztik az adott osztályt. C++ esetén létezik friend jelölés is, ekkor az így jelölt osztály 
                hozzáfér annak az osztály private és protected tagjaihoz, amelyik friendként deklarálta. Függvények esetén pedig olyan hozzáférést kapnak, mintha az adott osztály tagfüggvényei lennének.
                Ha pedig az osztály elé nem rakunk semmilyen kulcsszót, Java esetén package-private lesz az osztály, ami azt jelenti hogy csak az adott package-ben férhető hozzá más osztályok által, C++ esetén pedig alapértelmezetten private lesz.
                Változók, függvények esetén pedig alapértelmezetten az osztály módosítóját veszik figyelembe. A konstruktor minden esetben public, ha privatera állítjuk akkor nem lehet példányosítani az osztályt.
        </para>
        <para>
            Az absztrakt osztályok abban különböznek a nem absztrakt osztályoktól, hogy tartalmazhatnak absztrakt metódusokat, de lehetnek hagyományos metódusok is mint egy normális osztálynak. Az osztályhierarchia tetejét alkotó osztályok nagy részének 
            az a szerepe, hogy a leszármazottak interfészének közös metszetét definiálja, mintsem, hogy kész megvalósítást adjon. Ezeket absztrakt osztályoknak hívjuk.
        </para>
        <para>
            Az interfész egy új referencia típus. Az osztályokhoz képest itt hiányoznak metódusok definiálása, implementációi, csak deklarálva vannak. C++ estén nincs konkrétan interface, de ugyanazt az eredményt lehet 
            létrehozni egy absztrakt osztály létrehozásával, amiben minden metódust virtual jelzővel látunk el. Java esetén külön létezik az interface és absztrakt osztály fogalma. 
            Bármennyi interfészt lehet implementálni, de mindig csak 1 osztályt lehet kiterjeszteni. Amikor az osztály implementál egy interfészt, akkor kötelező minden az interfészben megfogalmazott metódust felülírni, implementálni.
            Ezáltal az adott osztály minden olyan helyen használható lesz, ahol az interfész típusa van megadva, ez érvényes az interfészt implementáló osztályt kiterjesztő osztályokra is.
            Az interfész gyakorlatilag egy tulajdonságot biztosít az osztálynak és ez alapján biztosak lehetünk benne az olyan helyeken, ahol csak egy bizonyos tulajdonságú (adott iterface-t implementáló) osztályt kaphatunk.
            Java interfésznél minden metódus automatikusan public és abstract.
        </para>
    </section>
    <section>
        <title>3.hét Modellező eszközök és nyelvek. AZ UML és az UML osztálydiagramja.</title>

        <para>
            Az UML szabványos modellező nyelv. Nagyméretű programrendszerek modelljeinek vizuális dokumentálására alkalmas, ennek segítségével különböző szöveges és grafikus modellek készíthetőek.
            Programok esetén az UML az objektumorientált programozás szabványos specifikációs nyelve. Az UML modellek UML diagramokból állnak. Az osztálydiagram 
            egy statikus modell. A programban használt osztályokat, interfészeket attrubútumaival együtt, ezeknek a kapcsolatait mutatja be.
        </para>
    </section>
    <section>
        <title>4.hét Karakterkészlet, lexikális egységek, kifejezések, utasítások.</title>
        <para>
            A két leggyakoribb karakterkészlet az ASCII, ennek kiterjesztése az ISO-Latin-1, valamint az EBCDIC. Ezek 8 biten tárolják a karaktereket, ezért nem lehet bennük 
            leírni a sok nemzet speciális karaktereit, pl a magyak karaktereket sem. Az ISO-Latin-1-ben sincs meg az összes szükséges betű, ezért számunkra 
            csak az ISO-Latin-2 felel meg. Ezektől a kötöttségektől mentesít az Unicode karakterkészlet, ami több biten ábrázolja a karaktereket, ezért több karaktert is tud magába
            foglalni.
        </para>

        <para>
            A lexikális egységek a program azon elemei, melyeket a fordító a lexikális elemzés során felsimer és tokenizál. Az utasítások és kifejezések lexikális 
            egységekből épülnek fel. Fajtái: 
            szimbolikus név, kulcsszavak, megjegyzés, literál, operátorok.
            Szimbolikus nevek közül az azonosító olyan karaktersorozat, ami betűvel kezdődik és betűvel vagy számjeggyel folytatódhat.
            A kulcsszavak vagy védett szavak olyan szavak amelyeknek a nyelv jelentést tulajdonít. Pl.: if, for, case, break.
            A megjegyzés olyan programozási eszköz, melynek segítségével a programban olyan karaktersorozatok írása megengedett, amelyek
            nem a fordítónak szól, hanem a programot olvasónak. Általában a ezek a program működésével kapcsolatos magyarázó szövegek.
            A literál pedig olyan eszköz aminek segítségével fix értékek építhetők be a program szövegébe, típusok, objektumok inicializálására használatosak.
            Az operátorok pedig értékeken történő műveletek végézésére használhatóak.
        </para>
        <para>
            Az utasítások segítségével generálja a fordítóprogram a tárgyprogramot. Két nagy csoportja van: deklarációs és végrehajtható utasítások.
            A deklarációs utasítás a fordítóprogramnak szólnak, valamilyen szolgáltatást kérnek, üzemmódot állítanak be, információt szolgáltatnak a tárgykód generáláshoz.
            A végrehajtható utasításokból készül a tárgykód, ezeket az alábbiak szerint csoportosítjuk: Értékadó utasítás, üres utasítás, ugró, elágaztató, 
            ciklusszervező, hívó, vezérlésátadó, I/O utasítások és egyéb utasítások.
            Az értékadó utasítás feladata beállítani vagy módosítani egy változó értékét. Az üres utasítás hatására a CPU egy üres gépi utasítást hajt végre. Pl continue, null.
            Az ugró utasítás átadjuk a vezérlést egy adott pontról egy adott cimkével elátott utasításra. Ez a GOTO. Java esetén ilyen utasítás nincs.
            Elágaztató utasítások közé tartotik a feltéletes utasítás ami kétriányú, ami arra szolgál, hogy a program két tevékenység közül válasszon. If, else.
            A többirányú elágaztató utasítás a switch(kifejezés) case (feltétel) : (tevékenység). Ez arra szolgál, hogy a program kölcsönösen kizáró akárhány tevékenység közül egyet végrehajtsunk.
            A ciklusszervező utasítások lehetővé teszik, hogy a program egy bizonyos tevékenységet akárhányszor megismételjen.
            Két szélsőséges eset amikor egyszerm sem fut le, ami az üres ciklus és a másik, hogy soha nem áll le, ez a végtelen ciklus. A feltételes ciklus egy feltétel teljesülése szerint
            ismétlődik. A ciklusok fajtái: Kezdőfeltételes(while). Végfeltételes( do utasítás while(feltétel)), előírt lépésszámú(for). A végtelen ciklusból szabályosan a break utasítással tudnunk kilépni.
            A continue vezérlő utasítás a ciklus magjában alkalmazható. A ciklus hátralevő utasításai nem hajta végre, hanem az ismétlődés feltételeit vizsgálja meg és vagy újabb cikluslépésbe kezd, 
            vagy befejezi a ciklust. A reuturn[kifejezés] pedig szabályosan befejezteti a függévényt és visszaadja a vezérlést a hívónak.
        </para>

    </section>

    <section>
        <title>5.hét Objektumorientált programozási nyelvek típusrendszere</title>
        <para>
            Típusok tagjai: mezők, (nevesített) konstansok,tulajdonságok, metódusok, események, operátorok, indexelők, konstruktorok, destruktorok, beágyazott típusok. 
        </para>
        <para>
            Típusokból léteznek egyszerű, primitív vagy objektumok, osztályok. A 8db primitív típus: boolean, char, byte, short, int, 
            long, float, double. A primitív változók magukat az értéket tárolják, azonban a nem primitívek objektumhivatkozásokat tartalmaznak.
            Az objektumhivatkozások típusozására az osztályokat valamint interfészeket és tömb típusokat is használhatjuk. Konstans lehet bármilyen típus, ami létezik. Kötelező inicializálni, kezdőértéket megadni, ami állandó, nem lehet megváltoztatni, inicializált értéke
            állandó.
        </para>
        <para>
            A metódusok egy osztály, objektum viselkedését, funkcióit adják meg, ha van visszatérési értéke akkor függvényeknek nevezzük. 
            A konstruktor pedig egy olyan sepciális tagfüggvény, amelynek neve megegyezik az osztály nevével és automatikusan
            meghívódik az osztály példányosításakor. A konstruktor építi fel az objektumot, abban az értelemben,
            hogy a törzsében megadott változókat inicializálja egy alapértelmezett értékre, vagy a paraméterként átadott értékekre.
            Fontos, hogy a konstruktor neve meg kell egyezzen az objektum nevével és ha nem definiálunk saját konstruktort, akkor alapértelmezetten 
            létrejön egy üres konstruktor. A destruktor ellenkező hatást vált ki, felszabadítja az objektum által használt erőforrásokat. Jelölése C++ esetén ~ a név előtt, 
            java esetén a garbage collector gondoskodik erről a feladatról automatikusan. 
        </para>
        <para>
            Az operátorok értékeken történő műveletek végézésére használhatóak, azonban túlterhelhetőek saját működést definiálva ezáltal.
        </para>
        <para>
             A beágyazott típus egy osztályon belül definiált másik osztály, ezáltal a két osztály szorosan összekapcsolódik és a beágyazott osztály 
             nem létezhet az ezt tartalmazó osztályon kívűl.
        </para>
        <para>
         Az indexelés segítségével megcímezhetünk, indexelhetünk objektumot, ennek hatására lehetőségünk van ez objektum adatainak hozzáféréséhez.
         Mindezt a get – set párossal tudjuk megvalósítani, értékeket olvasunk ki. 
         A this szót alkalmaznunk kell, mely arra utal, hogy az adott objektumról beszélünk. Az eseménye előre definiált metódusok,
          amik adott esemény bekövetkezésekor elkezdenek futni. A tulajdonságok C# esetén a Getter/Setter metódusokat váltják ki. Úgy kezelhetőek, mint változók, azonban függvények. 
        </para>
    </section>


    <section>
        <title>A Python nyelv bemutatása</title>
        <para>
           A Python egy általános célú programozási nyelv, amely magas szintű, dinamikus, objektumorientált és platform független.
           Tanulási ciklusa igen rövid, ezért hamar lehet látványos eredményeket elérni vele. A Python tulajdonképpen egy szkriptnyelv, rendkívűl sok csomagot és 
           beépített eljárást tartalmaz, így komolyobb problémák megoldására és összetett alkalmazások készítésére is használható.
           Python esetében nincs szükség fordításra minden mótosítás után. Prototípus alkalmatás készítésére a Python a legalkalmasabb, mivel egyszerű a használata, 
           megbízható és jelentős támogatást biztosít a hibák javítására. A nyelvhez tartozó kódkönyvtárak rengeteg újrahasznosítható modulokat tartalmaznak, amelyek jelentősen 
           meggyorsítják a fejlesztést. Ilyen modulok vannak pl a fájlkezelésre, hálózatkezelésre, rendszerhívásokra, UI kialakítására, ezért tömörebb, rövidebb 
           könyebben olvasható programkód készíthető, mint C,C++ vagy Java nyelven. Ennek okai még a következők: A magas szintű adattípusok lehetővé teszik, hogy 
           összetett kifejezéseket írjunk le rövid állításban, a kódcsoportosítás egyszerű tagolással történik és nincs szükség változó vagy argumentumdefiniálásra.
        </para>
        <para>
         A nyelv fő jellemzője, hogy behúzásalapú a szintaxisa, nincs szükség kapcsos zárójelekre vagy explicit kulcsszavakra. Egy adott blokk végét egy 
         kisebb behúzású sor jelzi. Az utasítások a sor végéig tartanak, nincs szükség a ; használatára. Ha egy utasítás több sorban fér el, akkor a sor végére írt \ jellel lehet jelezni.
         Pythonban minden adatot objektumok reprezentálnak. Az adatokon végezhető műveleteket az objektumok típusa határozza meg. Nincs szükség a változók típusának megadására, futásidőben a rendszer kitalálja a hozzárendelt típust.
         Az adattípusok lehetnek számok, stringek, ennesek, listák, szótárak. Az ennesek objektumok gyűjteményei vesszőbel elválasztva, típusai lehetnek eltérőek is. Ezeket zárójelek közé írjuk.
         A lista különböző elemek rendezett szekvenciája. A szótás kulcsokkal azonosított elemek rendezetlen halmaza. A null értéknek none a neve.
         Boolean típusként bármilyen változó használható.
        </para>
        <para>
            Pythonban változók alatt az egyes objektumokra mutató referenciákat értünk, maguknak a változóknak nincsenek típusai, így akár különböző típusú objektumra is mutathatnak futásidőben. 
            Ha töröljük az utolsó hivatkozást az objektumról, akkor a garbage collector szabadítja fel. Ha egy változót globálisként akarunk kezelni, akkor elég kell írni a global kulcsszót.
            A különböző típusok közötti konverzió is támogatott. Szekvenciákon és szótárakon több beépített függvényt is használhatunk.
        </para>
    </section>
</chapter>                
