<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
         <para>
            Írj egy olyan <function>malloc</function> és <function>free</function>
            párost használó C programot, amely helyet foglal
            egy alsó háromszög mátrixnak a szabad tárban!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/1MRTuKwRsB0">https://youtu.be/1MRTuKwRsB0</link>,
            <link xlink:href="https://youtu.be/RKbX5-EWpzA">https://youtu.be/RKbX5-EWpzA</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Caesar/tm.c">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Caesar/tm.c</link>
            
        </para>
        <figure>
            <title>A <type>double **</type> háromszögmátrix a memóriában</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/doublecscs.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A <type>double **</type> háromszögmátrix a memóriában</phrase>
                </textobject>
            </mediaobject>
            
        </figure> 
        <programlisting language="c"><![CDATA[#include <stdio.h>
        
#include <stdlib.h>
int
main ()
{
    int nr = 5;
    double **tm;
    
    printf("%p\n", &tm);
    
    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }

    printf("%p\n", tm);
    
    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }

    printf("%p\n", tm[0]);    
    
    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    tm[3][0] = 42.0;
    (*(tm + 3))[1] = 43.0;	// mi van, ha itt hiányzik a külső ()
    *(tm[3] + 2) = 44.0;
    *(*(tm + 3) + 3) = 45.0;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm);

    return 0;
}
]]></programlisting>
        

        <para>
            A képen a double ** háromszögmátrix memóriafoglalását bemutató ábrát láthatjuk.
            Az <command>nr</command> változóval megadjuk a háromszögmátrix magasságát. Jelen esetben ez 5 lesz.
            A <command>double ** tm</command> egy mutatóra mutató mutató.
            A <command> malloc</command>-al foglalunk memóriát ami egy mutatót ad vissza a lefoglalt
            területre (double * mutatót), amit double ** mutatóvá típuskényszerítjük, így a tm mutatónkat rá tudjuk állítani erre a tárterületre.
            A <command> malloc</command>-nak átadjuk
            mekkora területet foglaljon le. Ebben az esetben a double * mutató mérete, ami 8, szorozva az nr változóval,
            így 40 -et kapva ennyi bájtot foglalunk a memóriába.
        </para> 
        <para>
        Ezután egy for ciklussal végigmegyünk ezen a területen 1-5-ig és minden double * mutatót is ráállítunk egy double típusú
        területre, aminek a darabszámát mindig egyel növeljük,így az első mutató 1db double-re mutat, a második 2-re és így tovább haladva 5-ig, így 
        kapjuk meg a háromszögmátrixot. Ezután értékeket adunk a változóinknak és kiiratjuk őket, majd felszabadítjuk a lefoglalt területeket.
        </para>
        <para>
            A memóriacímek a képen eltérőek a magunk által lefutatott programtól. Az első cím a tm változó első tárrekeszében lévő címet jelenti
            , ami a képen a 0x7ffe54baff50, jelen esetben pedig a 0x7ffcce3e76f0. A második cím memóriafoglalás után bekerül a tm területére. Ez a képen a 0x5620b562d670, ami a 
            0x5625f1eb4670. A harmadik cím pedig a tm első elemének a címét adja meg. A képen ez a 0x5620b562d6a0, ami a 0x5625f1eb46a0.
        </para>   
 <screen>
        <![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Caesar$ ./tm
0x7ffcce3e76f0
0x5625f1eb4670
0x5625f1eb46a0
0.000000, 
1.000000, 2.000000, 
3.000000, 4.000000, 5.000000, 
6.000000, 7.000000, 8.000000, 9.000000, 
10.000000, 11.000000, 12.000000, 13.000000, 14.000000, 
0.000000, 
1.000000, 2.000000, 
3.000000, 4.000000, 5.000000, 
42.000000, 43.000000, 44.000000, 45.000000, 
10.000000, 11.000000, 12.000000, 13.000000, 14.000000, 

        ]]>
        </screen>  
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Caesar/exor/exor.c">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Caesar/exor/exor.c</link>              
        </para>
        <para>
        Ebben a feladatban a kizáró vagyos (XOR) titkosítás van bemutatva. A kizáró vagyos
        titkosításkor a titkosítandó szöveg bájtjait lefedjük a titkosító
        kulcs bájtjaival és egy kizáró vagy múveletet végzünk el rajtuk. A kizáró vagy művelet
        1 értéket ad, ha a két bit különböző és 0-t ha megegyező. Például:
        </para>  
        <screen>
        <![CDATA[
            Kódolás:
            A tiszta szöveg bájtja:                         10011
            A kulcs bájtja:                                 00110
            A titkosított szöveg bájtjai XOR művelet után:  10101
            Dekódolás:
            A kulcs bájtja:                                     00110
            A titkosított szöveg bájtjai:                       10101
            XOR művelet után visszakapjuk az eredeti szöveget:  10011
        ]]>
        </screen>  
                   <programlisting>
         <![CDATA[
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#define MAX_KULCS 100
#define BUFFER_MERET 256
int
main (int argc, char **argv)
{
  char kulcs[MAX_KULCS];
  char buffer[BUFFER_MERET];
  int kulcs_index = 0;
  int olvasott_bajtok = 0;
  int kulcs_meret = strlen (argv[1]);
  strncpy (kulcs, argv[1], MAX_KULCS);
  while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
    {
      for (int i = 0; i < olvasott_bajtok; ++i)
	{
	  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	  kulcs_index = (kulcs_index + 1) % kulcs_meret;
	}
      write (1, buffer, olvasott_bajtok);
    }
}
 ]]>  
         </programlisting>   
         <para>
            A program elején definiáljuk a kulcs maximum méretét és a beolvasáshoz szükséges buffer méretét.
            Ezután a main függvényben létrehozzuk az ezekkel a méretekkel rendelkező char típusú tömböket.
            A kulcs_index változó mutatja az aktuális elemét a kulcsnak, amivel majd végrehajtjuk a műveletet,
            az olvasott_bajtok pedig a beolvasott bájtok számát fogja tárolni.
            Az <command>strlen()</command> függvény segítségével rögzítjuk a kulcs méretét amit a parancssorban adunk
            meg argumentumként.
            A while ciklus addig fut, amíg tudunk olvasni a bemenetről és azt tároljuk a bufferben, ha beolvasott szöveg
            végéhez értünk, akkor a <command>read()</command> függvény 0 értéket ad vissza és a ciklus véget ér.
            A while ciklusban végigmegyünk a beolvasott bájtokon és végrehajtjuk a tikosítást alkalmazva a kizáró
            vagy műveletet, majd az eredményt kiírjuk egy dokumentumba.
         </para>  
         <para>Fordítákor a c99 szabványt kell használnunk:</para>
         <screen>
        <![CDATA[
            gcc exor.c -o e -std=c99
        ]]>
         </screen>   
          <para>Eztuán létrehozunk egy szövegfájlt, amiben tároljuk a titkosítandó szövegünket</para>
         <screen>
<![CDATA[
    adrian@adrian-MS-7817:~/Desktop$ more tiszta.szoveg
    Nem tudok kimerítő leírást adni arról, hogy hogyan tudsz megtanulni
    programozni -- nagyon összetett tudásról van szó. Egyet azonban
    elárulhatok: a könyvek és tanfolyamok nem érnek túl sokat (sok,
    valószínűleg a legtöbb hacker autodidakta). Aminek van értelme:
     (a) kódot olvasni és kódot írni.
 ]]>
         </screen> 
     <para>Majd futtatjuk a programot megadva paraméterként a kulcsot és a 
            tiszta.szoveg fájlunk tartalmát a programba irányítjuk (ezt olvassa be). A kimenő
            adatokat pedig a titkos.szoveg nevű fájlba irányítjuk. Ez lesz a titkosított szövegünk.
     </para>
         <screen>
 <![CDATA[
 adrian@adrian-MS-7817:~/Desktop$ ./e kulcs <tiszta.szoveg >titkos.szoveg
     ]]>
         </screen>  
 <para>Kiírva a tikos.szoveg tartalmát láthatjuk a kódolt szövegünket:</para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/exor.png" scale="50" />
                </imageobject>
         </mediaobject>
<para>A dekódolás hasonlóan zajlik. Megadjuk azt a kulcsot amivel a kódolás történt és beolvassuk
        a tikos.szoveg tartalmat.
</para>
         <screen>
        <![CDATA[
adrian@adrian-MS-7817:~/Desktop$ ./e kulcs <titkos.szoveg
Nem tudok kimerítő leírást adni arról, hogy hogyan tudsz megtanulni
programozni -- nagyon összetett tudásról van szó. Egyet azonban
elárulhatok: a könyvek és tanfolyamok nem érnek túl sokat (sok,
valószínűleg a legtöbb hacker autodidakta). Aminek van értelme:
(a) kódot olvasni és kódot írni.
        ]]>
         </screen> 

    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Caesar/exor/ExorTitkos%C3%ADt%C3%B3.java">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Caesar/exor/ExorTitkos%C3%ADt%C3%B3.java</link>                  
        </para>
 <programlisting>
         <![CDATA[
public class ExorTitkosító {
    
    public ExorTitkosító(String kulcsSzöveg,
            java.io.InputStream bejövőCsatorna,
            java.io.OutputStream kimenőCsatorna)
            throws java.io.IOException {
        
        byte [] kulcs = kulcsSzöveg.getBytes();
        byte [] buffer = new byte[256];
        int kulcsIndex = 0;
        int olvasottBájtok = 0;
        while((olvasottBájtok =
                bejövőCsatorna.read(buffer)) != -1) {
            
            for(int i=0; i<olvasottBájtok; ++i) {
                
                buffer[i] = (byte)(buffer[i] ^ kulcs[kulcsIndex]);
                kulcsIndex = (kulcsIndex+1) % kulcs.length;
                
            }
            
            kimenőCsatorna.write(buffer, 0, olvasottBájtok);
            
        }
        
    }
    
    public static void main(String[] args) {
        
        try {
            
            new ExorTitkosító(args[0], System.in, System.out);
            
        } catch(java.io.IOException e) {
            
            e.printStackTrace();
            
        }
        
    }
    
}
 ]]>  
         </programlisting>   

        <para>
           Javaban egy ExorTitkosító publikus osztályt vagy objektumot hozunk létre amiben a munkát végezzük.
           Először létrehozzuk a konstruktort, amivel majd átadjuk az objektumnak a kapott értékeket.
           Jelen esetben a paraméterként átadott kulcsot tároljuk egy stringbe, majd a bejövő és kijövő
           csatornát hozzuk létre.
           Egy byte tömben tároljuk a megadott kulcs bájtjait, illetve a buffer méretet.
           A while ciklusba addig olvasunk az int típusú beolvasottBájtok nevű változónkba,
           amíg -1-et nem kapunk, és egy for ciklussal iterálunk az olvasott bájtokon egyesével végezve
           a kizáró vagy műveletet a kulcsunk bájtjaival, amit tárolunk buffer tömbben.Végül a kimenő csatornán kiiratjuk a titkosított szöveget.
            A main() metódusban példányosítjuk az ExorTitkosító objektumunkat és átadjuk neki
            a paraméterként kapott kulcsot és a be és kimenő csatornát Mindezt try és catch ágba téve, az esetleges
            hibák elkapásához.
            
        </para>            
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Caesar/exor/t.c">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Caesar/exor/t.c</link>               
        </para>
            <programlisting>
         <![CDATA[
int
main (void)
{
  char kulcs[KULCS_MERET];
  char titkos[MAX_TITKOS];
  char *p = titkos;
  int olvasott_bajtok;
 
  while ((olvasott_bajtok =
	  read (0, (void *) p,
		(p - titkos + OLVASAS_BUFFER <
		 MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
    p += olvasott_bajtok;
  // maradek hely nullazasa a titkos bufferben  
  for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
    titkos[p - titkos + i] = '\0';
  // osszes kulcs eloallitasa
 for (int ii = '0'; ii <= '9'; ++ii)
    for (int ji = '0'; ji <= '9'; ++ji)
      for (int ki = '0'; ki <= '9'; ++ki)
	for (int li = '0'; li <= '9'; ++li)
	  for (int mi = '0'; mi <= '9'; ++mi)
	    for (int ni = '0'; ni <= '9'; ++ni)
	      for (int oi = '0'; oi <= '9'; ++oi)
		for (int pi = '0'; pi <= '9'; ++pi)
		  {
		    kulcs[0] = ii;
		    kulcs[1] = ji;
		    kulcs[2] = ki;
		    kulcs[3] = li;
		    kulcs[4] = mi;
		    kulcs[5] = ni;
		    kulcs[6] = oi;
		    kulcs[7] = pi;
		if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
		      printf
			("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
			 ii, ji, ki, li, mi, ni, oi, pi, titkos);
		    // ujra EXOR-ozunk, igy nem kell egy masodik buffer  
		    exor (kulcs, KULCS_MERET, titkos, p - titkos);
  return 0;
}
 ]]>  
         </programlisting> 

        <para>
       Ez az exor törő program 0-9-ig számokat tartalmazó 8 számjegyű számmal kódolt szöveget töri fel. A program teljes egészében a forrásban
       látható. Hosszúsága miatt csak a main() függvényt szúrtam be. Hasonlóan az exor titkosítónál, itt is meg kell adni a max kulcs méretet, jelen esetben ez 8, illetve
       a titkos szövegünk max méretét. A while ciklusban beolvassuk a titkos szöveget, majd a titkos bufferben nullázzuk a maradék helyet. Ezután az összes lehetséges
       kulcsot előállítjuk for ciklusokkal 0-9-ig, közben alkalmazva a kulcsokon a kizáró vagy műveletét a tikos szöveggel és ha van találat akkor kiiratjuk a kulcsot és a már
       feltört szöveget, majd újra exorozunk, így nem kell új buffer.
        </para>
        <para>Az exor titkosító programunkkal titkosítottunk egy szöveget a megfelelő kulcsot megadva, majd az exor törővel sikerült ezt feltörni, második találatra.
              Minél több különböző számot tartalmaz a kucsunk, annál tovább fog tartani a törés. Jelen esetben egy egyszerűbb kulccsal lett titkosítva a sz9veg, a törés gyorsabbá tétele miatt.
        </para>
        <screen>
        <![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Caesar$ ./e 10000001 <tiszta.szoveg > titkos.szoveg
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Caesar$ ./t <titkos.szoveg
Kulcs: [10000000]
Tiszta szoveg: [Nem tudnk kimer­tő le­rást `dni arr³l, hogx hogyan!tudsz mdgtanulnh
progralozni --!nagyon ¶sszeteut tudárról vao szó. Dgyet aznnban
el¡rulhatnk: a k÷nyvek ès tanfomyamok ndm érnej túl snkat (soj,
valórzínűldg a leguöbb habker autndidakta(. Aminej van éstelme:
)a) kódnt olvasoi és k³dot ísni.
]
Kulcs: [10000001]
Tiszta szoveg: [Nem tudok kimerítő leírást adni arról, hogy hogyan tudsz megtanulni
programozni -- nagyon összetett tudásról van szó. Egyet azonban
elárulhatok: a könyvek és tanfolyamok nem érnek túl sokat (sok,
valószínűleg a legtöbb hacker autodidakta). Aminek van értelme:
(a) kódot olvasni és kódot írni.
        ]]>
         </screen> 

    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/attention_raising/NN_R/nn.r">https://github.com/p-adrian05/BHAX/blob/master/attention_raising/NN_R/nn.r</link>               
        </para>
        <para>
            A neurális háló vagy számítógépes idegháló az emberi agy által fogadott elektromos jelek
            feldolgozásán, összegyűjtésén és szétterjesztésén alapszik. Az ábrán látható az idegsejt
            matematikai modellje:
        </para>  
               <mediaobject>
                <imageobject>
                    <imagedata fileref="img/neural.png" scale="50" />
                </imageobject>
         </mediaobject>  

         <para>
            A bemeneten számok érkeznek amelyeknek van egy súlya, amit összeadunk és a neuron akkor fog
            "tüzelni", ha a bemeneti értékek súlyozott összege meghalad egy bizonyos köszöböt, ami a W0 lesz -1 értékkel, ez az eltolássúly.
            Ezután egy g aktivációs függvényt alkalmaz a kapott értékre, majd tovább adja a függvény értékét.
         </para> 
         <programlisting>
         <![CDATA[
library(neuralnet)
a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
or.data <- data.frame(a1, a2, OR)
nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)
plot(nn.or)
compute(nn.or, or.data[,1:2])
 ]]>  
         </programlisting>   
         <para>
            R nyelvben dolgozunk, amihez telepíteni kell először a neuralnet csomagot.
            A a1 és a2-be berakjuk az értékeket és az OR-ban megadjuk mit kellene kapnia ha logikai vagy művelettet laklamzaunk
            a1 és a2-re, tehát megtanítjuk a szabályokat. Ez alapján elkezni magát tanítani a program, a súlyokat
            beállítja, majd a compute parancssal leelenőrizzük, hogy valóban a megadott értékeinkre helyes eredmnényt 
            ad a program, amit megtanult, hogyan állítson elő. Láthatjuk, hogy jó eredményeket kaptunk, illetve a 
            jó erdeményhez nagyon közelitő értékeket.
         </para>
         <screen>
        <![CDATA[
 compute(nn.or, or.data[,1:2])
$neurons
$neurons[[1]]
       a1 a2
[1,] 1  0  0
[2,] 1  1  0
[3,] 1  0  1
[4,] 1  1  1
$net.result
            [,1]
[1,] 0.001332171
[2,] 0.999639318
[3,] 0.999002995
[4,] 1.000000000
        ]]>
         </screen> 

    <para>Illetve vizuálisan is láthatjuk a hálónkat a súlyokkal:</para>
    <mediaobject>
                <imageobject>
                    <imagedata fileref="img/orhalo.png" scale="40" />
                </imageobject>
         </mediaobject>  
     <programlisting>
         <![CDATA[
a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)
orand.data <- data.frame(a1, a2, OR, AND)
nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)
plot(nn.orand)
compute(nn.orand, orand.data[,1:2])
 ]]>  
         </programlisting>  
         
         <para> Ebben az esetben már az és logikai műveletet is megtanítjuk a programnak, az előzővel megegyező módon.</para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/orandhalo.png" scale="50" />
                </imageobject>
         </mediaobject>  

         <para>Az exor művelet megtanítása ugyanezzel az algoritmussal azonban már nem működik. Nem kapunk helyes eredményt, ezért
            ide egy más algoritmus fog kelleni.
         </para>
         <screen>
        <![CDATA[
 compute(nn.or, or.data[,1:2])
$neurons[[1]]
       a1 a2
[1,] 1  0  0
[2,] 1  1  0
[3,] 1  0  1
[4,] 1  1  1
$net.result
          [,1]
[1,] 0.4999969
[2,] 0.5000000
[3,] 0.4999995
[4,] 0.5000025
        ]]>
         </screen> 
        
<programlisting>
         <![CDATA[
a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)
exor.data <- data.frame(a1, a2, EXOR)
nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=2, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)
plot(nn.exor)
compute(nn.exor, exor.data[,1:2])
 ]]>  
         </programlisting>  
         <para>A különbség ez előző algoritmusokhoz képest itt annyi, hogy több rejtett neuronnal dolgozunk, jelen esetben 2-vel, tehát
         több rétegű neuronokkal lehetséges a tanítás. A hidden értékét kell 2-re állítani. Láthatjuk az eredmény így már helyes lesz:</para>
         <screen>
        <![CDATA[
$neurons[[1]]
       a1 a2
[1,] 1  0  0
[2,] 1  1  0
[3,] 1  0  1
[4,] 1  1  1
$neurons[[2]]
     [,1]       [,2]         [,3]
[1,]    1 0.99999978 5.691445e-07
[2,]    1 0.99333503 9.999998e-01
[3,]    1 0.99437209 9.999994e-01
[4,]    1 0.00586727 1.000000e+00
$net.result
            [,1]
[1,] 0.001187882
[2,] 0.998911294
[3,] 0.998926671
[4,] 0.001178602
        ]]>
         </screen> 
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/exorhalo.png" scale="40" />
                </imageobject>
         </mediaobject>  
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás videó:<link xlink:href="https://youtu.be/XpBnR31BRJY">https://youtu.be/XpBnR31BRJY</link> 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Caesar/perceptron">https://github.com/p-adrian05/BHAX/tree/master/textbook_programs/Caesar/perceptron</link>                              
        </para>
        <para>
            Ebben a feladatban a mandelbrot halmaz által generált kép rgb kódjait áttesszük a neurális háló inputjába, egy három rétegű hálót csinálunk és végül különböző számítások alapján kapunk
            a 3. rétegben egy számot.
        </para>      
        <programlisting>
         <![CDATA[
#include <iostream>
#include "mlp.hpp"
#include "png++/png.hpp"
int main (int argc, char **argv)
{
    png::image <png::rgb_pixel> png_image (argv[1]);
    int size = png_image.get_width()*png_image.get_height();
    
    Perceptron* p = new Perceptron(3, size, 256, 1);
    double* image = new double[size];
    
    for(int i {0}; i<png_image.get_width(); ++i)
         for(int j {0}; j<png_image.get_height(); ++j)
            image[i*png_image.get_width()+j] = png_image[i][j].red;
    double value = (*p) (image);
    std::cout << value << std::endl;
    delete p;
    delete [] image;
}
 ]]>  
         </programlisting> 
         <para>Használjuk az mlp.hpp-t amiben a perceptron osztály van. Beimportáljuk az előállított képünket. A perceptron objektumnak foglalunk szabad területet. Megadjuk
            , hogy hány réteget használunk, a kép méretét, és hogy 1 szám legyen az eredmény. Lefoglalunk a képnek helyet, majd feltöltjük for ckulussal
              a paraméterben megadott képpel, végül meghívjuk a függvény operátort aminek átadjuk a képet. Végül kiiírjuk a függvény által visszaadott értéket.
         </para> 
         <para> Az alábbi módon fordítjuk:</para>
                  <screen>
        <![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Caesar$ g++ mlp.hpp main.cpp -o perc -lpng -std=c++11
        ]]>
         </screen> 
         <para>Majd lefuttatva, átadva a képet megkapjuk az értéket:</para>
         <screen>
        <![CDATA[
adrian@adrian-MS-7817:~/Desktop/BHAX/textbook_programs/Caesar$ ./perc mandel.png
0.585456
        ]]>
         </screen> 
    
    </section>        
        

</chapter>