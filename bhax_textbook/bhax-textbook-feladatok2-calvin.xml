<chapter xmlns="http://docbook.org/ns/docbook" 
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Calvin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>MNIST</title>
        <para>
        Az alap feladat megoldása, +saját kézzel rajzolt képet is ismerjen fel, 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Schwarzenegger/softmax.py">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Schwarzenegger/softmax.py</link>
        </para>
        <para>

        </para>
        <para>
            A program működéséhez szükséges telepíteni a python fejlesztői környezetet és a Tensorflow-t, ami gépi tanuláshoz használt, nyílt forráskódú könyvtár. 
            Telepítéséhez a következő parancsok szükségesek:
            <screen>
                <![CDATA[
sudo apt update
sudo apt install python3-dev python3-pip
sudo pip3 install -U virtualenv  # system-wide install
virtualenv --system-site-packages -p python3 ./venv
source ./venv/bin/activate  # sh, bash, ksh, or zsh
pip install --upgrade pip
pip list  # show packages installed within the virtual environment
pip install --upgrade tensorflow
python -c "import tensorflow as tf; tf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"
 ]]>
            </screen>

        </para>
        <para>
            Ez a program egyben példa is a 
            multiparadigmás programozásra, ugyanis egy objektum orientált programozási nyelvet a pythont és egy adatfolyam programozást képviselő 
            Tensorflow-t használja. Az adatfolyam programozásban a számítás irányított gráf, adatok, tokenek áramlanak. Az MNIST egy hatalmas adatbázis, ami kézzel írott digitalizált számokat tartalmaz. Neurális hálózatok, képelemzési szoftverek tanítására nagy segítséget nyújt, ugyanis az adatbázisban 
            foglalt képek mintaként szolgálnak, amik segítségével lehetséges a bemeneti képek elemzése. 
        </para>
        <para>Jelen esetben 60000 képpel tanítjuk a neurális hálózatot és 10000-rel pedig a pontoságát mérjük fel. A képek mérete nagyon alacsony, 
        a gyorsabb feldolgozás érdekében, illetve a feldolgozás előtt a képeket leskálázza.</para>
        <screen>
            <![CDATA[
def readimg():
    file = tf.read_file("sajat2.png")
    img = tf.image.decode_png(file)
    return img


print("-- A MNIST sajat tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
  img = readimg()
  image=img.eval()
  image = image.reshape(28*28)
  matplotlib.pyplot.imshow(image.reshape(28, 28), cmap = matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("2.png")  
  matplotlib.pyplot.show()

  classification=sess.run(tf.argmax(y, 1), feed_dict = {x: [image]})
   print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
 ]]>
        </screen>
        <para>Saját kép beolvasásához definiálni kell egy függvényt, ami már rögtön dekódolja a tensorflow-nak megfelelően, majd a eval() meghívása a képen egy 1 dimenziós vektorrá alakítja.
            Ezután átméretezi a megfelelő méretre és megmutatja a felhasználónak, majd elmenti a megadott néven. A classification tömb első eleme
            pedig a legnagyobb valószínűséggel felsimert számot, 0-9 ig terjedő számjegyet fogja adni. 
        </para>
        <para>
             A tanulás után a programot teszteljük az MNIST adatbázisból kiválaszlott képekkel. Jelen esetben a 3-mas és 9-essel, illetve saját 
             írott, rajzolt képet is megadhatunk.
             Az következőképpen futtatjuk: <command> python softmax.py</command>
        </para>


        <para>A felismerés után megkapjuk a felismert számú képet.</para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/mnist1.png" scale="40" />
            </imageobject>
        </mediaobject>
        <para>Saját rajzolt kettes szám felismerése:</para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/mnist2.png" scale="40" />
            </imageobject>
        </mediaobject>

        <mediaobject>
            <imageobject>
                <imagedata fileref="img/mnist3.png" scale="40" />
            </imageobject>
        </mediaobject>

    </section>
    <section>
        <title>Android telefonra a TF objektum detektálója</title>
        <para>
        Telepítsük fel, próbáljuk ki! 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/android">https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/android</link>
        </para>
        <para>
            Az alkalmazás a tensorflowt használatát mutatja be androidos telefonon. 
            A projektet csak importálni kell Android studioba és a build.gradle fájlban átírni 
            a def nativeBuildSystem = 'bazel' helyett def nativeBuildSystem = 'none'-ra. Ezután csak 
            egy csak apk fájlt kell generálni amit telepíteni kell a telefonra. Az első három 
            kép a TF Detect appal készült, ami a Tensorflow Object Detection APi-t használja a 
            felismeréshez az utolsó kép pedig a TF Classify appal készült, ami pedig a Google Inception 
            modeljét használja.
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="img/tf1.png" scale="30" />
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/tf2.png" scale="30" />
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/tf3.png" scale="30" />
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/tf4.png" scale="30" />
            </imageobject>
        </mediaobject>

    </section>
    <section>
        <title>Minecraft MALMO-s példa</title>
        <para>
       A https://github.com/Microsoft/malmo felhasználásával egy ágens példa, lásd pl.: 
        </para>
        <para>
    https://youtu.be/bAPSu3Rndi8,
        </para>
        <para>
  https://bhaxor.blog.hu/2018/11/29/eddig_csaltunk_de_innentol_mi, 
        </para>
        <para>
  https://bhaxor.blog.hu/2018/10/28/minecraft_steve_szemuvege 
        </para>
        <para>
            A telepítéshez szükséges parancsok az install_linux.md fájlban találhatóak.
            Először a python könyvtárakat kell telepíteni az első paranccsal, majd a malmo sémákat kell hozzáadni a Pathühoz. Mivel a program 
            Java 8-cal működik, ezért le kell tölteni és ezt is beállítani környezeti változónak.
        </para>
        <screen>
            <![CDATA[
sudo apt-get install libboost-all-dev libpython3.5 openjdk-8-jdk ffmpeg python-tk python-imaging-tk
export MALMO_XSD_PATH=/home/adrian/malmo/Schemas
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
 ]]>
        </screen>
        <para>
           Végül a Minecraft mappába belépve, a <command>./launchClient.sh</command>
 parancsot kiadva, indulnia kell a játéknak, de 
           nálam ismeretlen okokból nem indult.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/malmo.png" scale="50" />
            </imageobject>
        </mediaobject>
    </section>


</chapter> 