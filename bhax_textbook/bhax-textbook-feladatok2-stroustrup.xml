<chapter xmlns="http://docbook.org/ns/docbook" 
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
  <info>
    <title>Helló, Stroustrup!</title>
    <keywordset>
      <keyword/>
    </keywordset>
  </info>
  <section>
    <title>JDK osztályok</title>
    <para>
       Írjunk olyan Boost C++ programot (indulj ki például a fénykardból) amely kilistázza a JDK összes
osztályát (miután kicsomagoltuk az src.zip állományt, arra ráengedve)!
    </para>

    <para>
            Megoldás forrása:
    </para>
    <para>
    </para>
    <programlisting language="C++">
      <![CDATA[ 
#include <iostream>
#include <string>
#include <fstream>
#include <boost/filesystem.hpp>

void readClasses(String path,std::vector<string> &classes);
int main(int argc, char *argv[]){

std::string path;
  std::vector<string> classes; if(argc==1){
         path = argv[0];
         readClasses(path,&classes);
    }
    

    for(int i = 0;i<classes.size();i++)
    {
        std::cout<<classes[i] <<"\n"<<;
    }


}

void readClasses ( boost::filesystem::path path, std::vector<string> &classes )
{

        if ( is_regular_file ( path ) ) {

                std::string ext ( ".java" );
                if ( !ext.compare ( boost::filesystem::extension ( path ) ) ) {

                        classes.push_back(path.string());
                }

        } else if ( is_directory ( path ) )
                for ( boost::filesystem::directory_entry & entry : boost::filesystem::directory_iterator ( path ) )
                        readClasses ( entry.path(), classes );

}
]]>
    </programlisting>



  </section>
  <section>
    <title>Másoló-mozgató szemantika + Összefoglaló</title>
    <para>
            Kódcsipeteken (copy és move ctor és assign) keresztül vesd össze a C++11 másoló és a mozgató
szemantikáját, a mozgató konstruktort alapozd a mozgató értékadásra!  
    </para>
    <para>
          Megoldás forrása:   <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Welch/z3a11.cpp">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Welch/z3a11.cpp</link>
    </para>
    <para>
    Másoló konstruktor akkor kerül meghívásra C++ esetén, ha inicializálatlan objektumhoz értéket rendelünk. Gyakran van szükség 
    több példányra ugyanabból az objektumból, ekkor szükséges a másoló konstruktor. Ha nem adunk meg saját másoló konstruktort, akkor 
    automatikusan keletkezik egy, ami csak egyszerűen lemásolja a nem statikus adattagokat, ezt hívjuk shallow copynak. Ha az adott osztályunk mutatókat vagy 
    referenciákat tartalmaz, ez az alapértelmezett másoló konstruktor nem megfelelő, mert nem a mutatott adatokat, hanem a mutatót magát másolja át.
    Továbbá a másoló konstruktor paramétere az osztály egy objektumára vonatkozó referencia kell, hogy legyen, különben végtelen ciklus keletkezik, mert 
    a paraméterátadáshoz is a másoló konstruktort használjuk. A másoló konstruktor hívódik meg az alábbi esetekben: 
    változó kezdeti értékének beállításakor, nem referencia  függvényparaméter átadásakor, függvény nem referenciával visszatérésekor és kivétel dobásánál és 
    elkapásánál. A másoló konstruktor és az értékadó operátor lehet private elérésű, ekkor az osztály objektumai nem hozhatóak létre és nem 
    másolhatóak, de az osztály publikus tagfüggvényei így is elérik őket. A másoló értékadás pedig akkor kerül meghívásra, ha már egy 
    létező objektumnak akarunk egy olyan új értéket adni, ami egy már létező másik objektum.
    </para>

    <para>
         Példaként a binfa másoló konstruktora, ami meghívásra kerül, amikor egy új binfa objektumot hozunk létre a régiből, ami egy másolata az eredetinek.
         A másoló konstruktorba referenciaként kapjuk a régi, lemásolandó objektumot. Ezután a régi fa minden csomópontjának értékén végig megyünk, hogy beállítsuk
         az új fa csomópontjait, ez a másol függvényben kerül sorra. Pontosan ugyanaz a fa lesz kiépítve az új binfába, mint a régibe ami úgy történik, hogy egyszerűen 
         megyünk végig a régi fa csomópontjain és közben állítjuk be az új fa értékeit, a régi fa értékeivel. Az ujelem mutató mutat az aktuálisan lemásolt csomópontra,
         ,ami ha egyenlő az aktuális régi fa csomópontjával akkor beállítjuk az új fa aktuális csomópontjának. Másoló értékadás esetén (operator=) is hasonló dolog történik.
        Mielőtt a másolás megtörténik, először felszabadítjuk az eredeti fát, majd létrehozzuk a gyokeret és az új gyokerbe masoljuk át a másolandó, régi fa elemeit.
    </para>

    <programlisting language="c++">
      <![CDATA[ 

    //Másoló konstruktor
 LZWBinFa ( const LZWBinFa & regi ) {
          std::cout << "LZWBinFa copy ctor" << std::endl;

          gyoker = masol(regi.gyoker,regi.fa);
     }
Csomopont *  masol ( Csomopont * elem, Csomopont * regifa ) {

          Csomopont * ujelem = NULL;

          if ( elem != NULL ) {
               ujelem = new Csomopont ( elem->getBetu() );

               ujelem->ujEgyesGyermek ( masol ( elem->egyesGyermek (), regifa ) );
               ujelem->ujNullasGyermek ( masol ( elem->nullasGyermek (), regifa ) );

               if ( regifa == elem )
                    fa = ujelem;

          }

          return ujelem;
     }
    //Másoló értékadás
   LZWBinFa &operator=(LZWBinFa &regi)
     {
          std::cout << "LZWBinFa copy assign" << std::endl;
          szabadit(gyoker);
          gyoker = new Csomopont();
          gyoker = masol(regi.gyoker, regi.fa);
          return *this;
     }

]]>
    </programlisting>
    <para>
        Az első esetben egy új objektumot hozunk létre egy régiből, ezért meghívásra kerül a másoló konstruktor. A második esetben pedig másoló értékadás kerül meghívásra
        mivel egy létező objektumnak adunk egy létező objektum értékét. A harmadik esetben újra másoló konstruktor hívódik meg, mivel egy vektorba másolunk be egy objektumot.
    </para>
    <programlisting language="c++">
      <![CDATA[ 
int
main ( int argc, char *argv[] )
{

LZWBinFa binFa;
//masolo konstruktor meghivodik
LZWBinFa binFa2 =  binFa;  
LZWBinFa binFa4 = binFa;
//masolo ertekadas meghivodik
binFa2 = binFa4;
//masolo konstruktor meghivodik
std::vector<LZWBinFa> b;
b.push_back(binFa);

]]>
    </programlisting>

    <mediaobject>
      <imageobject>
        <imagedata fileref="img/copyctor.jpg" scale="70" />
      </imageobject>
    </mediaobject>

    <para>
         A C++11 verzió egyik legfontosabb újítása a mozgató szemantika bevezetése: a mozgató értékadást és mozgató konstruktort. A másoló értékadás és konstruktor esetében 
         egy objektum tartalmát csak átmásolja egy másik objektumba, azonban a másolás erőforrás igényes, mert a másolás idejekor egyszerre kell két objektumnak is memóriát foglalni 
         és csak utána lehet felszabadítani a régit. Ezért ahol lehet és nincs szükség a másolandó adat megőrzésére, akkor kerülni kell a másolást, mivel a mozgató konstruktor és értékadás 
         egy sokkal hatékonyabb megoldás mint a másolás. Ebben az esetben a régi objektum átadja minden erőforrását az újnak, ezáltal a régi, forrás objektumnak nem lesz tartalma, egy üres objektum lesz.
    </para>

    <para>
       Példaként a binfa mozgató konstruktora és értékadása látható. A mozgató konstruktorban paraméterként kapott régi, mozgatandó objektumot megkapjuk, 
       majd a jelenlegi új objektumnak a gyokér mutatóját null-ra állítjuk. 
       Ezután *this = std::move(regi) kényszeríti ki a mozgató értékadást, ahol pedig felcseréljük a régi és az új fa gyökerének mutatóit. Mivel kezdetben az új fa gyökér mutatóját 
       nullra lett állítva, így a régi fa gyökere most nullra mutat, az új pedig a régi fa gyökerére. Ha nem tettük volna meg a null pointerre való állítást, akkor a régi fa destruktora került 
       volna meghívásra és törölte volna a mozgatandó erőforrásokat, így nem történt volna meg a mozgatás.
    </para>
    <para>
          Fontos megjegyezni, hogy a mozgató szemantikában egy nem konstans jobb érték referenciát kap paraméterként, (dupla referencia jel) míg a másolás esetén egy konstans
          bal érték referencia kerül paraméterként átadásra. Ezáltal a másolás esetén továbbra is használható lesz a másolt objektum, mozgatás esetén viszont csak ideiglenes szerepet kap 
          a mozgatandó objektum és nem lesz utána már használható.
    </para>
    <programlisting language="c++">
      <![CDATA[ 

    //Mozgató konstruktor
   LZWBinFa(LZWBinFa &&regi)
     {
          std::cout << "LZWBinFa move ctor" << std::endl;

          gyoker = nullptr;
          *this = std::move(regi);
     }
    //Mozgató értékadás
    LZWBinFa &operator=(LZWBinFa &&regi)
     {

          std::swap(gyoker, regi.gyoker);
          return *this;
     }


]]>
    </programlisting>
    <para>
         A main függvényben három alkalommal is meghívódik a mozgató konstruktor és vele együtt a mozgató értékadás. Az első esetben a két különálló fa 
         objektumra meghívjuk a swap metódust, ami megcseréli a két objektum erőforrásait, ami mozgatással történik a swapon belül. A második esetben egy vectorba tesszük bele 
         az objektumot, ami ezután már nem lesz használható, mivel std::move(binFa) jobb érték referenciaként lett átadva. Ha v.push_back(binFa) bal érték referenciaként került
         volna átadásra akkor a másoló konstruktor kerül meghívásra és megmarad az eredeti objektum erőforrása is. A harmadik lehetőség, amikor pedig egy teljesen új objektumba 
         mozgatjuk át a binFa2 erőforrásait.
    </para>
    <programlisting language="c++">
      <![CDATA[ 
int
main ( int argc, char *argv[] )
{

LZWBinFa binFa;
//masolo konstruktor meghivodik
LZWBinFa binFa2 =  binFa;  
LZWBinFa binFa4 = binFa;
//masolo ertekadas meghivodik
binFa2 = binFa4;
//masolo konstruktor meghivodik
std::vector<LZWBinFa> t;
t.push_back(binFa);

//mozgato konstruktor meghivodik
std::cout << "Swap" << std::endl;
std::swap(binFa2, binFa4);

//mozgato konstruktor meghivodik
std::cout << "Vector" << std::endl;
std::vector<LZWBinFa> v;
v.push_back(std::move(binFa));

//mozgato konstruktor meghivodik
std::cout << "Új fa" << std::endl;
LZWBinFa binFa3 = std::move(binFa2);

]]>
    </programlisting>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/movector.jpg" scale="70" />
      </imageobject>
    </mediaobject>


  </section>
  <section>
    <title>Változó argumentumszámú ctor</title>
    <para>
			Készítsünk olyan példát, amely egy képet tesz az alábbi projekt Perceptron osztályának bemenetére
és a Perceptron ne egy értéket, hanem egy ugyanakkora méretű „képet” adjon vissza. (Lásd még a 4
hét/Perceptron osztály feladatot is.)
    </para>
    <para>
          Megoldás forrása:  <link xlink:href="https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Stroustrup/Perceptron/main.cpp">https://github.com/p-adrian05/BHAX/blob/master/textbook_programs/Stroustrup/Perceptron/main.cpp</link>
    </para>

    <para>
    A Perceptron egy neurális háló, aminek csomópontjai vannak. A csomópontok a mesterséges neuronok. Két fő csomópont a bemeneti és kimeneti csomópontok. Van egy központi csúcs is, ahol a 
    számolás történik. Az input csúcsokból bejövő kapcsolatok súlyozva vannak, ami alapján történik a számolás a központi csúcsban. A tanulás abból áll, hogy a bejövő kapcsolatok erőssége változik, 
    a sokat használt kapcsolatokban erősödik, a ritkán használtakban gyengül. Egy neurális hálózat esetén pedig több réteg lehet egymás után, amik a perceptronok és minden perceptron az eggyel korábbi 
    szinten lévőkből kapja az inputot és az eggyel későbbi szintre továbbítja.
    </para>

    <programlisting language="C++">
      <![CDATA[ 
#include <iostream>
#include "mlp.hpp"
#include "png++/png.hpp"

int main(int argc, char **argv)
{
    png::image<png::rgb_pixel> png_image(argv[1]);
    int size = png_image.get_width() * png_image.get_height();

    Perceptron *p = new Perceptron(3, size, 256, size);

    double *image = new double[size];

    for (int i{0}; i < png_image.get_width(); ++i)
        for (int j{0}; j < png_image.get_height(); ++j)
            image[i * png_image.get_width() + j] = png_image[i][j].red;

    double *newImage = new double[size];
    *newImage = (*p)(image);

    for (int i{0}; i < png_image.get_width(); ++i)
        for (int j{0}; j < png_image.get_height(); ++j)
            png_image[i][j].red = newImage[i * png_image.get_width() + j];

    png_image.write("newMandel.png");

    delete p;
    delete[] image;
    delete[] newImage;
}
]]>
    </programlisting>
    <para>
         Ebben a projektben használjuk a Perceptron osztályt. A mandel program által előállított kép lesz feldolgozva.
         Először eltároljuk png::image objektumként a paraméterként kapott képet. A size változóban a kép méretét tároljuk el. Ezután létrehozzuk a 
         perceptron objektumot, mutatóját megadva a konstruktorának a paramétereket, ami változó paraméter számú. A 3 a neurális háló rétegek számát jelenti, a size a kép mérete, a 256 a neuronok száma az egyes 
         rétegekben, ellentétben az előző perceptron feladatban, most nem 1 hanem 256 kimeneti neuront adunk meg, ezáltal egy ugyanakkora képet kapunk vissza.
          Lefoglaljuk az új kép méretének, pixeleinek a helyét egy double tömbre mutató mutatóval, ami az eredi kép összes pixelét képes tárolni.
         Ezután két for ciklussal bejárjuk az eredeti képet, pixeleit és az új helyre tesszük az eredeti kép piros komponenseit.
         Miután megvan a kép, meghívjuk a perceptron osztály () operátorát átadva azt a tömböt amiben az eredeti kép pixelei vannak, ami most nem egy double típusú értéket ad vissza, hanem egy double értékeket tároló tömböt, aminek értékeivel módosítjuk 
         az eredeti kép pixeleit. Két for ciklussal szintén végigjárunk a pixeleken és most az eredeti kép piros komponenseit cseréljük ki azokra az értékekre, amit kaptunk perceptron osztálytól.
         Végül az elkészült képet kimentjük és felszabadítjuk a memóriát.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/mandel.png" scale="40" />
      </imageobject>
    </mediaobject>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/percep2.jpg" scale="80" />
      </imageobject>
    </mediaobject>

    <mediaobject>
      <imageobject>
        <imagedata fileref="img/newMandel.png" scale="40" />
      </imageobject>
    </mediaobject>

  </section>
</chapter>   